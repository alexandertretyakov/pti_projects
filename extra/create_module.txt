Создать Backbone модуль как replacer [ST_MODULE_1]
    Создать папку в /replacers
        Создать View от BaseReplacerView, зарегистрировать в движке
            Зарегистрировать обработчи событий
            Использовать JS (+ ES6+), Browser API (+ HTTP), jQuery API, underscore API
        Создать Model/Collection
        Создать папку tmpl, создать шаблон (HTML + doT API)
    Создать файл со стилями (CSS + SCSS), зарегистрировать в движке
        Разные стили для desktop & mobile
    Добавить TK (xxx.stModule1.xxx)

    Создать страницу в CMS (URL & title)
        Выбрать ей layout, указать permissions
    Создать WebContent "ST_MODULE_1" с использованием [ST_MODULE_1]
    Положить на страницу портлет WebContent с нужным WebContent ID, настроить портлет

    Использование
        DTAG
        Playtech.Variables

    Использование других модулей
        Form
        formatter
        i18n
        user
        ...

    Получить данные от IMS
    TODO: Получить данные от CMS/json/content/3rd
    TODO: картинки

Создать React модуль как replacer [ST_MODULE_1]

Создать Backbone модуль как портлет

Создать React модуль как портлет

// =========================================================================== Ежедневный отчет за 2 мин.

До работы (1.5 часа): HTML, CSS
Новые слова (daily, Skype, разговор, planning, grooming, Jira issue description): ---
Разбор задачи: ---
Checklist (30 мин): 1 - 30
Алгоритмы (1 час): juxt
Writing (10 мин): The magic of Oz (740 letters)
Работа (6 часов): ST Module 17 (Backbone)
Grammar (30 минут): Сущ., При., Нар., Мес., Чис., Гла.
CS/Vocabulary (30 мин): 1 - 80
Книга и слова (1 час): The magic of Oz (1, 2 глава)

// ===========================================================================

ТЗ для модуля №23

[ST_MODULE_23]
/stm23

Всего будет 5 компонентов
App, Bear, Fox, Hedgehog, Camel

В компоненте App 4 кнопки с надписями (Bear, Fox, Hedgehog, Camel - TK) в одной "строке"
При клике на каждую на экране отображается соответствующий компонент (ленивая загрузка)
Каждый из компонентов (Bear, Fox, Hedgehog, Camel) состоит из <img> и CSS к нему

CSS
    - круглая картинка
    - со скругленными углами
    - с тенью
    - с границей (dotted)

Эта задача про React.lazy и React.Suspense

// ===========================================================================

ТЗ для модуля №22

[ST_MODULE_22]
/stm22

Тырять тут
https://starkscan.co/txs

Плашка с кнопкой
  Кнопка с солнцем и луной (переключает тему)
  Переключение темы реализовать с помощью CSS Variables
    var(--ololo)

Плашка с заголовком и текстом

Блок со списком транзакций (20 штук)
  Для сетки использовать CSS Grid
  Хэш транзакции и адреса полный, дата полная
  При выводе на экран обрезать

Иконки Copy, Info
  Копирование хэша транзакции/адреса в буфер обмена при нажатии на иконку копирования
Разные Status и Type

TK

Мобильной версии не будет

Эта задача про SVG, CSS Grid, CSS Variables

// ===========================================================================

ТЗ для модуля №21

[ST_MODULE_21]
/stm21

https://www.chartjs.org/docs/latest/getting-started/
https://www.chartjs.org/docs/latest/charts/bar.html
https://www.chartjs.org/docs/latest/charts/doughnut.html

type: 'bar'
type: 'doughnut'

HTML - 10%
CSS - 20%
JS - 30%
Python - 30%
Shell - 10%

// ===========================================================================

ТЗ для модуля №20

[ST_MODULE_20]
/stm20

https://threejs.org/manual/examples/fundamentals-3-cubes.html

Украсть этот пример
canvas размером 600 на 300

// ===========================================================================

ТЗ для модуля №19

[ST_MODULE_19]
/stm19

https://pixijs.com/8.x/examples/sprite/basic
https://pixijs.com/8.x/examples/events/click

Скрестить первый и второй пример
Вращающийся персонаж, но с возможностью масштабирования
Апендить не в document.body, а в корневой элемент твоей вьюшки
И размеры холста взять те же (корневой элемент твоей вьюшки)

// ===========================================================================

ТЗ для модуля №18

[ST_MODULE_18]
/stm18

https://randomuser.me/api/?results=30

TK

Отобразить пользователей
Карточка на Desktop (белая, граница, скругления, тень)
  фото, ободок, статус (online|offline|away|busy)
  имя, фамилия (жирным)
  email (приглушенным)
  кнопка View profile
Полосочка на Mobile (белая, граница, скругления, тень)
  фото (без ободка)
  имя, фамилия (жирным), email (приглушенным)
  статус (online|offline)
  город
  телефон
  кнопка View profile

Пагинация с черным кружком (active) (без троеточия). Белая плашка, граница, скргуления, тень, без стрелочек возле Prev, Next. Если пагинация не нужна, то не показываем всю белую плашку.

DTAG отвечающий за количество пользователей всего (?results=40) (по умолчанию 40)
Playtech.Variables отвечающий за количество пользователей на странице (по умоланию 8)

При клике на кнопку View profile открывать popup с детальной информацией о пользователе (пишешь сам, не использовать готовый). Детальная информация представлена в виде таблицы. Дизайн попапа с нашего сайта.
Имя, Фамилия
Пол
Страна
Город
Дата рождения (в формате 4/17/2025)

Единицы измерения px, rem

в методе parse добавь каждому пользователю новое свойство onlineStatus
случайное число 1-4. (1 - online | 2 - offline | 3 - away | 4 - busy)

// ===========================================================================

ТЗ для модуля №17

[ST_MODULE_17]
/stm17

Отобразить комментарии как на дизайне
TK
Дизайн для mobile/tablet есть
https://www.telefonnyjdovidnyk.com.ua/nomer/0674660466

Массив комментриев и массив плохих слов хранить в CMS (файлы скинул в Teams)
Комментарии можно фильтровать
Дату отформатировать как на дизайне
Вместо иконок использовать спецсимволы
Правее фильтров будет секция с чекбоксом скрывающем/отображающем плохие слова. Скрытие - замена слова на картинку (выше ссылка). Стили и принцип как сделать чекбокс (выше на нашем сайте есть пример) (можно сделать в конце)
Все hover состояния для кнопок взять с сайта (указан выше)
Предусмотреть что json может быть битым (невалидным)

// ===========================================================================

ТЗ для модуля №16

[ST_MODULE_16]
/stm16

Отобразить кнопку с "long press"
и счетчик (0, 1, 2, 3, 4, 5,...)
TK
на mobile градиент (progress) другого цвета

// ===========================================================================

ТЗ для модуля №15

[ST_MODULE_15]
/stm15

Отобразить пользователю input c type="text"
но с ограничением ТОЛЬКО ЦИФРЫ и не более 6 ШТУК

label ----------- SMS code
placeholder ---------------- Enter 6 character code
CSS: border на focus разных цветов для desktop & mobile
transition 1s

// ===========================================================================

ТЗ для модуля №14

[ST_MODULE_14]
/stm14

Отобразить пользователю YouTube ролик в iframe
https://www.youtube.com/watch?v=hPHBppXNgaM
было бы здорово соблюдать пропорции

// ===========================================================================

ТЗ для модуля №13

[ST_MODULE_13]
/stm13

Отобразить пользователю долг США как на картинке
Фон и 3 плашки (текст, сумма, дата)
0. Фон - флаг США
1. ТК "Внешний долг США"
2. Сумма в формате $ 19,252,128,599,192.75
3. Дата в формате 10/22/2024
Для форматирования сумм и дат использовать модуль formatter

Сумма изменяется каждую секунду на 2,128,599,192.75

Отличие для mobile: border для плашек другого цвета

Там еще будет кнопка
Ниже даты
При клике на ней таймер будет останавливаться навсегда
Повторные клики похуй
TK: Stop!
Можно сделать ее неактивной после клика. Чтобы не было желания на нее нажать снова

// ===========================================================================

ТЗ для модуля №12

[ST_MODULE_12]
/stm12

Отобразить пользователю круг радиусом A, цветом B, смещенный по оси X и Y на растояние C и D

Круг в контейнере (с высотой 500px) центрирован по центру (вертикали и горизонтали). Контейнеру задать border для видимости

Значения A, B, C, D брать из URL
/stm12?radius=60&color=green&offsetX=30&offsetY=80
если какого-то из значений в URL нет то использовать дефолтные
радиус = 50
цвет = blue
смещение по X = 0
смещение по Y = 0

Отличие для mobile: при клике на кружок он должен исчезнуть

// ===========================================================================

ТЗ для модуля №11

[ST_MODULE_11]
/stm11

+38 (096) 111-22-33
[Скрыть|Отобразить] TK

Если пользователь нажимает Скрыть
+** (**) ***-**-**
Если пользователь нажимает Отобразить
+38 (096) 111-22-33
380961112233 -> ************
ЦИФРЫ в *

Работа с RegExp

// ===========================================================================

ТЗ для модуля №10

[ST_MODULE_10]
/stm10

ST_MODULE_10_GAMES_COUNT=8, 20
(если не установлено, то по умолчанию 8, 20)
(8 - desktop, 20 - mobile)

В CMS в папке /library/st-module-10/
будет 2 json файла
-existingGames.json (список всех активных игр)
-getBonusesResponse.json (данные о боусах у игрока)

Сделать запрос за 2 этими файлами
В getBonusesResponse.json по пути data -> bonusTemplates
найти бонусы с playType равным freespins
у каждого такого найденого бонуса по пути gamingContext -> selectedGames получить список игр
объединить все эти игры в один список без повторений
отфильтровать полученный список игр (оставить только те игры которые существуют в existingGames.json)
Отсечь лишнее испольую DTAG ST_MODULE_10_GAMES_COUNT
где первое число это max допустимое количество игр на desktop
второе число это max допустимое количество игр на mobile

В React версии использвать pipe из Ramda для обработки данных
Использовать await вместо then где это возможно

Итого получить список игр и вывести их пользователю на экран
На desktop так же как в модуле №9 (изменять количество колонок зависимости от ширины окна браузера) от 2 до 4 колонок
На mobile список названий игр (четные строки выделить отличным фоном)

// ===========================================================================

ТЗ для модуля №9

[ST_MODULE_9]
/stm9

ST_MODULE_9_EXCLUDED_BREEDS=hound, borzoi, corgi

https://dog.ceo/api/breed/hound/images
https://dog.ceo/api/breed/borzoi/images
https://dog.ceo/api/breed/boxer/images
https://dog.ceo/api/breed/bulldog/images
https://dog.ceo/api/breed/chihuahua/images
https://dog.ceo/api/breed/corgi/images

Внешний вид: аккордеон
HEAD - Название породы TK
BODY - Список картинок 9 шт. 3*3

гриды для колонок

Картинки прямоугольные, без бордеров
На mobile & tablet 1 в строку
Соблюдать пропорции квадрата
В этот раз async/await
аккордеон по умолчанию 1 раскрыт
при клике на другой, активный сворачивается

// ===========================================================================

ТЗ для модуля №8

[ST_MODULE_8]
/stm8

DTAG => ST_MODULE_8_POSTS_ENDPOINT=https://jsonplaceholder.typicode.com/posts
DTAG => ST_MODULE_8_IMAGES_ENDPOINT=https://dog.ceo/api/breed/bulldog/images
<div class="posts">
    <article class="post">
        <img src="%imageURL%" >
        <h6>%title%</h6>
        <p>%body%</p>
    </article>
</div>

6 постов с картинками

Promise.all

На desktop картинка вверху, title & body внизу
По 3 поста в строке (2 строки)

На mobile & tablet картинка слева, title & body справа
По 1 посту на строку (6 строк)

// ===========================================================================

ТЗ для модуля №7

[ST_MODULE_7]
/stm7

DTAG => ST_MODULE_7_COMMENTS_ENDPOINT=https://jsonplaceholder.typicode.com/comments

<div class="no-comments">No comments</div>
или
<div class="comments">
    <article class="comment">
        <header>
                <strong class="email">%email%</strong>
                <strong class="date">2024-07-25</strong>
        </header>
        <p>%body%</p>
    </article>
</div>

.comments {
    с максимальной высотой и полосой прокрутки 500px
}

.comment {
  padding: 20px;
  border-bottom: 1px solid #444;
  чередовать фон #777 и #999 (четный, не четный комментарий)
}

.date {
  background: #6ecb6e;
  padding: 10px;
}

в header разнести дочерние элементы по бокам

не отображать комментарии в которых присутствут плохие слова
ST_MODULE_7_BAD_WORDS=quasi, deserunt, inventore, repellendus

<strong class="date">2024-07-25</strong> дата это просто какая-то случайная дата
сам генерируешь (у каждого комментария она своя)

desktop от mobile
header и абзац с %body% меняешь местами
с помощью CSS, а не шаблона

// ===========================================================================

ТЗ для модуля №6

[ST_MODULE_6]
/stm6

DTAG => ST_MODULE_6_CAT_ENDPOINT=https://api.thecatapi.com/v1/images/search

<button>Random cat image</button> TK
<div class="catWrapper">
    <img src="#">
</div>

При клике на кнопку запросить данные про кота и отобразить его.
catWrapper это серый контенер где фон меняется с #555 до #999 за 2 секунды туда и обратно, а так же img в нем оцентрирован по горизонтали и вертикали

img {
  width: 200px;
  height: 200px;
  object-fit: ;
  сделать круглым
}

.catWrapper {
    height: 400px;
}

desktop от mobile
фон меняется только на мобильных устройствах

не запрашивать данные о коте до тех пор пока не нажмет на кнопку

fetch().then или await fetch() мне похуй

// ===========================================================================

ТЗ для модуля №5

[ST_MODULES_5]
/stm5

DTAG => ST_MODULES_5_DOGS_ENDPOINT = 'https://dog.ceo/api/breed/bulldog/images'

<h6>Bulldog images</h6>
<div class="dogs">
    <img src="#">
    <img src="#">
    <img src="#">
    <img src="#">
    <img src="#">
    <img src="#">
</div>

Не больше 10 images

.dogs img {
  width: 50px;
  height: 50px;
  border: 6px solid white;
}

dogs => flex
gap: 10px

desktop от mobile
на desktop версии при наведении на картинку border плавно (0.5s) меняет цвет c белого на черный

в этот раз при использовании fetch использовать async/await

// ===========================================================================

ТЗ для модуля №4

[ST_MODULE_4]
/stm4

DTAG=>ST_MODULE_4_USERS_ENDPOINT='https://jsonplaceholder.typicode.com/users';

<ul>
    <li>sincere@april.biz</li>
    <li>shanna@melissa.tv</li>
</ul>

8 штук

CSS
desktop => маркированный список
mobile & tablet => нумерованный список

fetch('https://jsonplaceholder.typicode.com/users')
    .then((res) => res.json())
    .then((users) => console.log(users));

const get = async function(URL) {
    const res = await fetch(URL);
    const data = await res.json();

    return data;
};

get('https://jsonplaceholder.typicode.com/users')
    .then((users) => console.log(users));

// ===========================================================================

ТЗ для модуля №3

[ST_MODULE_3]
/stm3

DTAG=>ST_MODULE_3_SPINNER_COUNT=3

<div>
    <div class="spinner">
    <div class="spinner">
    <div class="spinner">
</div>

new Array(3).fill('ololo')

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

const topTenGamesDtag = useAppSelector(path(['dynamicTags', 'DTAG_TOP_TEN_GAMES']));
config.get('dynamicTags.DTAG_DISABLE_HTCMD')

.spinner {
  width: 50px;
  height: 50px;
  background: red;
}

// ===========================================================================

ТЗ для модуля №2

[ST_MODULE_2]
/stm2

<div class="field">
  <label for="">Фамилия</label>
  <input type="text" id="">
</div
<div class="output"></div>

TK

Стили для desktop & mobile разные

Все что пользователь будет писать в input отображать в .output

// ===========================================================================

ТЗ для модуля №1

[ST_MODULE_1]
/stm1

Отобразить кнопку при клике на которую меняется фон у кнопки
Надпись на кнопке через TK

Стили для desktop & mobile у кнопки разные

// ===========================================================================
