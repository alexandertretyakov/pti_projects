Добавляем React на сайт (первый вариант)
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <div id="root"></div>

    <script type="text/babel">
        ReactDOM.render(
            <h1>Хуй мусорам!</h1>,
            document.querySelector('#root')
        );
    </script>

Создаём новое React-приложение
    npm i -g create-react-app
    create-react-app todo (в папке проектов)
    npm start (в папке проекта)

Добавляем React на сайт (второй вариант)
    import React from 'react';
    import ReactDOM from 'react-dom';

    ReactDOM.render(
        <h1>Хуй мусорам!</h1>,
        document.querySelector('#root')
    );

React API
    React
        React.createElement(type, props, children)
            props {
                disabled: false,
                checked: true,
                defaultChecked: true,
                value,
                defaultValue,
                className: '',
                htmlFor: '',
                dangerouslySetInnerHTML: {__html: '<h1>Хуй мусорам!</h1>'},
                onChange: () => {},
                style: {fontSize: '30px'},
                children,
                'data-id': '_t14ha0nc0'
                https://ru.reactjs.org/docs/dom-elements.html
            }
        RE
            TODO
        React.Component
            props
            state
            constructor(props)
            render()
            componentDidMount()
            shouldComponentUpdate(nextProps, nextState)
            componentDidUpdate(prevProps, prevState)
            componentWillUnmount()
            setState(updater)
                stateChange
                (state, props) => stateChange
        React.Fragment
        React.useState
        React.useEffect
    ReactDOM
        ReactDOM.render(reactElement, container)

Поддерживаемые события
    onKeyDown onKeyPress onKeyUp
    onFocus onBlur
    onChange onSubmit
    onClick onDoubleClick onMouseEnter onMouseLeave onMouseOut onMouseOver
    https://ru.reactjs.org/docs/events.html

Жизненный цикл компонента
    Монтирование
        constructor(props)
        render()
        componentDidMount()
    Обновление
        shouldComponentUpdate(nextProps, nextState)
        render()
        componentDidUpdate(prevProps, prevState)
    Размонтирование
        componentWillUnmount()

Hooks
    useState
        const [count, setCount] = useState(0);
        const [count, setCount] = useState(() => calcCount());
        setCount(prev => prev + 1);

        const [state, setState] = useState(initialState);
        setState(newState);
    useEffect
        useEffect(() => {
            // componentDidMount, componentDidUpdate
            return () => {
                // componentWillUnmount
            };
        }, [dependencies]);
        useEffect(() => {
            // componentDidMount
        }, []);
        useEffect(() => {
            // componentDidMount, componentDidUpdate
        });
    useRef
        const countRef = useRef(1);

        const intervalIdRef = useRef();
        intervalIdRef.current = setInterval(fn, 1000);

        const ulRef = useRef();
        <ul ref={ulRef}>
    useMemo
        const value = useMemo(() => calcValue(dependencies), [dependencies]);
        const obj = useMemo(() => ({dependencies}), [dependencies]);
    useCallback
        const fn = useCallback(() => dependencies, [dependencies]);
        const fn = useCallback(() => {}, []);
    useReducer
        const reducer = (state, action) => {
            switch (action.type) {
                case 'add':
                    return [
                        ...state,
                        { id: Date.now(), name: action.payload }
                    ];
                case 'remove':
                    return state.filter((person) => person.id !== action.payload);
                default:
                    return state;
            }
        };
        const [state, dispatch] = useReducer(reducer, initialState);
        dispatch({ type: 'add', payload: 'Вася' });
        dispatch({ type: 'remove', payload: 1710149562835 });
    useContext
        const OloloContext = React.createContext();

        <OloloContext.Provider value={{x: 2, y: 4}}>
            ...
        </OloloContext.Provider>

        <OloloContext.Consumer>
            { ({x, y}) => (
                <div>x = {x}, y = {y}</div>
            ) }
        </OloloContext.Consumer>

        const { x, y } = useContext(OloloContext);
    TODO: свои хуки

HOCs
    memo(Component, (prevProps, nextProps) => {
        return nextProps.count === 3 ? false : true;
    });

TODO