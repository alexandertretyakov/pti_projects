const isEven = (n) => n % 2 === 0;

const inc = (n) => n + 1;

const add = (a, b) => a + b;

const students = [
    {name: 'Kyle', age: 22},
    {name: 'Oliver', age: 20},
    {name: 'Joe', age: 23},
    {name: 'Jack', age: 20}
];

const dot = { x: 2, y: 4 };

const circle = { x: 8, y: 9, r: 10 };

const man = {
    name: 'John',
    age: 35,
    hair: 'brown',
    coords: { x: 10, y: 0 }
};

const bear = {
    hair: 'brown',
    coords: { x: 12 }
};

const pig = {
    name: 'Peppa',
    age: 12,
    hair: 'pink',
    coords: { x: 14, y: 0 }
};

// ============================== Array

[1, 1].concat(2, 3)
// [1, 1, 2, 3]
[1, 1].concat(2, 3, [4, [5]])
// [1, 1, 2, 3, 4, [5]]

[2, 4, 5].every(isEven)
// false
[2, 4, 6].every(isEven)
// true

[3, 4, 5, 6, 7, 8, 9].fill(1)
//=> [1, 1, 1, 1, 1, 1, 1]
// [1, 1, 1, 1, 1, 1, 1]
[3, 4, 5, 6, 7, 8, 9].fill(1, 2)
//=> [3, 4, 1, 1, 1, 1, 1]
// [3, 4, 1, 1, 1, 1, 1]
[3, 4, 5, 6, 7, 8, 9].fill(1, 2, -2)
//=> [3, 4, 1, 1, 1, 8, 9]
// [3, 4, 1, 1, 1, 8, 9]

[3, 5, 6, 4].filter(isEven)
// [6, 4]

[3, 5, 6, 4].find(isEven)
// 6

[3, 5, 6, 4].findIndex(isEven)
// 2

[1, 2, [3, 4, [5, 6]], 7].flat()
// [1, 2, 3, 4, [5, 6], 7]
[1, 2, [3, 4, [5, 6]], 7].flat(2)
// [1, 2, 3, 4, 5, 6, 7]

[5, 6, 7].forEach(console.log)
//=> undefined
// В консоли:
// 5 0 [5, 6, 7]
// 6 1 [5, 6, 7]
// 7 2 [5, 6, 7]

[2, 4, 6, 3].includes(7)
// false
[2, 4, 6, 3].includes(6)
// true
[2, 4, 6, 3].includes(6, 3)
// false
[2, 4, 6, 3].includes(6, -3)
// true

[2, 4, 6, 4].indexOf(7)
// -1
[2, 4, 6, 4].indexOf(4)
// 1
[2, 4, 6, 4].indexOf(4, 2)
// 3
[2, 4, 6, 4].indexOf(4, -2)
// 3

[8, 29, 2025].join('/')
// '8/29/2025'

[2, 4, 6, 4].lastIndexOf(7)
// -1
[2, 4, 6, 4].lastIndexOf(4)
// 3
[2, 4, 6, 4].lastIndexOf(4, 2)
// 1

[5, 6, 7].map(String)
// ['5', '6', '7']
[5, 6, 7].map(inc)
// [6, 7, 8]

[5, 6, 7].pop()
//=> 7
// [5, 6]

[3, 4, 5, 6].push(2)
//=> 5
// [3, 4, 5, 6, 2]
[3, 4, 5, 6].push(2, 3)
//=> 6
// [3, 4, 5, 6, 2, 3]
[3, 4, 5, 6].push([2, 3])
//=> 5
// [3, 4, 5, 6, [2, 3]]

[5, 6, 7].reduce(add)
// 18
[5, 6, 7].reduce(add, 10)
// 28

[2, 4, 6, 3].reverse()
//=> [3, 6, 4, 2]
// [3, 6, 4, 2]

[5, 6, 7].shift()
//=> 5
// [6, 7]

[3, 4, 5, 6, 7, 8].slice(2, 4)
// [5, 6]
[3, 4, 5, 6, 7, 8].slice(2, -1)
// [5, 6, 7]
[3, 4, 5, 6, 7, 8].slice(2)
// [5, 6, 7, 8]

[1, 3, 5].some(isEven)
// false
[1, 3, 6].some(isEven)
// true

[4, 2, 8, 6].sort((a, b) => a - b)
//=> [2, 4, 6, 8]
// [2, 4, 6, 8]
[4, 2, 8, 6].sort((a, b) => b - a)
//=> [8, 6, 4, 2]
// [8, 6, 4, 2]

[3, 4, 5, 6, 7, 8, 9].splice(3, 3)
//=> [6, 7, 8]
// [3, 4, 5, 9]
[3, 4, 5, 6, 7, 8, 9].splice(-4, 3)
//=> [6, 7, 8]
// [3, 4, 5, 9]
[3, 4, 5, 6, 7, 8, 9].splice(3, 3, 11, 22)
//=> [6, 7, 8]
// [3, 4, 5, 11, 22, 9]
[3, 4, 5, 6, 7, 8, 9].splice(3, 0, 11)
//=> []
// [3, 4, 5, 11, 6, 7, 8, 9]
[3, 4, 5, 6, 7, 8, 9].splice(-4)
//=> [6, 7, 8, 9]
// [3, 4, 5]

[5, 6, 7].unshift(11)
//=> 4
// [11, 5, 6, 7]
