Типы данных:
    Число           5, 5.17
    Строка          'Вася', 'Я люблю Киев', "Don't"
    Логический      true, false

    undefined       undefined
    null            null

    Массив          [1, 2, 3, 4, 5], ['лук', 'капуста', 'огурцы']
    Объект          { name: 'Вася', age: 18 }
    Функция         function(a, b) { return a + b; }

Операторы:
    + - * / % ++ --
    === !== < <= > >=
    && || !
    ?:
    = *= /= %= += -=
    . []
    ()
    new
    delete typeof void instanceof in ,

Инструкции:
    var

    if (условие) { код } else { код }
    switch (выражение) {
        case значение_1:
            код
            break;
        case значение_2:
            код
            break;
        default:
            код
    }

    while (условие) { код }
    do { код } while (условие)
    for (инициализация; условие; финальное_выражение) { код }
    for (переменная in объект) { код }

    break
    continue
    return
    throw
    try {
        код
    } catch (e) {
        код
    } finally {
        код
    }

    debugger
    'use strict'

Встроенные переменные:
    Number
        Number.prototype: toFixed
    String
        String.prototype: charAt, concat, includes, indexOf, lastIndexOf, repeat, replace, slice, split,
            substr, substring, toLowerCase, toUpperCase, trim
    Boolean
    Array
        Array.prototype: concat, forEach, includes, indexOf, join, lastIndexOf, pop, push, reverse,
            shift, slice, splice, unshift, length, sort, map, filter, every, some, reduce, reduceRight
    Object: keys, values, create, assign, entries
        Object.prototype: hasOwnProperty
    Function
        Function.prototype: apply, call, bind

    Date
        Date.prototype: getFullYear, getMonth, getDate, getHours, getMinutes, getSeconds
    RegExp
        RegExp.prototype: test
    Promise
        TODO:

    Math: abs, ceil, floor, max, min, pow, random, round, sqrt, trunc
    JSON: stringify, parse

Регулярные выражения
    Конструктор     new RegExp('шаблон', 'флаги')       \ должен экранироваться
    Литерал         /шаблон/флаги

    Класс символов, наборы символов, символьные классы
        [abc]       символ из набора
        [^abc]      символ вне набора
        [a-z]       символ из диапазона внутри набора
        [A-Z0-9\sё] символ из диапазонов внутри набора
        .           любой символ кроме \n (если с флагом s, то любой символ)
        \s          пробельный символ                   [ \t\n] space
        \S          не \s                               [^ \t\n] или [^\s]
        \d          цифра                               [0-9] digit
        \D          не \d                               [^0-9] или [^\d]
        \w          лат. буква, цифра, подчеркивание    [a-zA-Z0-9_] word
        \W          не \w                               [^a-zA-Z0-9_]
        \n          символ новой строки

    Квантификаторы (число повторений), кванторы
        {2}         2 раза
        Жадный режим
        {2,4}       Не менее 2 и не более 4 раз
        {2,}        2 или более раз
        ?           0 или 1 раз         {0,1}
        *           0 или более раз     {0,}
        +           1 или более раз     {1,}
        Для включения ленивого режима работы квантификатора к нему необходимо добавить ?
        {2,4}?
        {2,}?
        ??
        *?
        +?

    Альтернатива, альтернация
        cat|dog         cat или dog

    Группировка, скобочная группа
        (?:cat)         группа без запоминания (захвата)
        (cat)           нумерованная группа с запоминанием или группировка
        (?<year>2014)   именованная группа с запоминанием
        \4              ссылка на нумерованную группу
        \k<year>        [обратная ]ссылка на именованную группу

    Ретроспективная и опережающая проверки
        (?<=Y)X     найти X если перед ним есть Y (позитивная ретроспективная проверка)
        (?<!Y)X     найти X если перед ним нет Y (негативная ретроспективная проверка)
        X(?=Y)      найти X если после него есть Y (позитивная опережающая проверка)
        X(?!Y)      найти X если после него нет Y (негативная опережающая проверка)

    Позиция соответствия, якоря
        ^           начало строки
        $           конец строки
        \b          граница слова (между ^ и \w, \w и \W, \W и \w, \w и $)
        \B          не \b

    Флаги, модификаторы шаблонов
        i           регистронезависимый поиск
        m           многострочный поиск
        g           глобальный поиск
        u           поддержка юникода и юникодных свойств \p{}
        s           включает режим в котором . любой символ, даже \n
        y           для поиска на заданной позиции re.lastIndex

    Методы
        //.test
        //.exec
        ''.match
        ''.search
        ''.replace
        ''.split

    Сайты
        https://regexper.com/
        https://regex101.com/



.charCodeAt()
String.fromCharCode()
помогут узнать код


[ - \ ^ & . | ? * + ( ) / ]
необходимо экранировать


внутри [] можно не экранировать
+ . ( )
- в начале или конце (где он не задает диапазон)
^ если не в начале (где он означает исключение)
] надо

\ экранирование (спецсимвол в обычный и наоборот)
\\ для конструктора
но [-().^+] не обязательно экранировать смотря где

Показать https://regexper.com/
управляющий символ



Мета-символы (экранируются)
^ [ .
$ { *
( \ +
) | ?
< >

