const isEven = (n) => n % 2 === 0;

const isOdd = (n) => n % 2 !== 0;

const students = [
    {name: 'Oliver', age: 20},
    {name: 'Jack', age: 20},
    {name: 'Kyle', age: 22},
    {name: 'Joe', age: 23}
];

const dot = { x: 2, y: 4 };

const circle = { x: 8, y: 9, r: 10 };

const matrix = [
    [1, 'a'],
    [2, 'b'],
    [3, 'c']
];

const man = {
    name: 'John',
    age: 35,
    hair: 'brown',
    coords: { x: 10, y: 0 }
};

const bear = {
    hair: 'brown',
    coords: { x: 12 }
};

const pig = {
    name: 'Peppa',
    age: 12,
    hair: 'pink',
    coords: { x: 14, y: 0 }
};

// ============================== Math

R.add(2, 3)
// 5; 2 + 3

R.subtract(5, 3)
// 2; 5 - 3

R.multiply(4, 4)
// 16; 4 * 4

R.divide(15, 3)
// 5; 15 / 3

R.inc(8)
// 9; 8 + 1

R.dec(8)
// 7; 8 - 1

R.negate(3)
// -3
R.negate(-3)
// 3

R.sum([1, 2, 3, 4])
// 10; 1 + 2 + 3 + 4

R.product([2, 3, 4])
// 24; 2 * 3 * 4

R.mean([2, 2, 26])
// 10; (2 + 2 + 26) / 3

R.modulo(5, 3)
// 2; 5 % 3
R.modulo(16, 2)
// 0; 16 % 2

// ============================== String

R.toLower('Kyiv')
// 'kyiv'

R.toUpper('Kyiv')
// 'KYIV'

R.trim(' My name is ')
// 'My name is'

R.toString(true)
// 'true'
R.toString([1, 2, 3])
// '[1, 2, 3]'
R.toString({ x: 15, y: 0})
// '{"x": 15, "y": 0}'

R.replace('Львов', 'Киев', 'Я люблю Львов')
// 'Я люблю Киев'

R.split('/', '2/7/2024')
// ['2', '7', '2024']

R.test(/Киев/, 'Я люблю Киев')
// true

R.match(/[a-z]a/g, 'bananas')
// ['ba', 'na', 'na']

// ============================== List

R.concat('Je', 'sus')
// 'Jesus'
R.concat([1, 1], [2, 3])
// [1, 1, 2, 3]

R.head('Jesus')
// 'J'
R.head([2, 3, 4])
// 2

R.last('Jesus')
// 's'
R.last([2, 3, 4])
// 4

R.init('Jesus')
// 'Jesu'
R.init([2, 3, 4])
// [2, 3]

R.tail('Jesus')
// 'esus'
R.tail([2, 3, 4])
// [3, 4]

R.take(2, [2, 3, 4, 5])
// [2, 3]

R.takeLast(2, [2, 3, 4, 5])
// [4, 5]

R.nth(2, [2, 3, 4, 5, 6])
// 4
R.nth(-2, [2, 3, 4, 5, 6])
// 5

R.length('Jesus')
// 5
R.length([2, 3, 4])
// 3

R.indexOf(7, [9, 8, 7, 6, 5, 4, 3])
// 2

R.join('/', [2, 7, 2024])
// '2/7/2024'

R.repeat(1, 5)
// [1, 1, 1, 1, 1]

R.uniq([1, 1, 1, 2, 3, 3, 4])
// [1, 2, 3, 4]

R.slice(2, 4, [1, 2, 3, 4, 5, 6])
// [3, 4]

R.includes(4, [2, 3, 4])
// true

R.insert(3, 35, [2, 3, 4, 5, 6])
// [2, 3, 4, 35, 5, 6]

R.append(9, [1, 2, 3, 4])
// [1, 2, 3, 4, 9]

R.prepend(9, [1, 2, 3, 4])
// [9, 1, 2, 3, 4]

R.update(1, 21, [3, 4, 5, 6])
// [3, 21, 5, 6]

R.adjust(1, R.toUpper, ['a', 'b', 'c'])
// ['a', 'B', 'c']

R.remove(2, 2, [1, 2, 3, 4, 5, 6])
// [1, 2, 5, 6]

R.without([1, 3, 7], [1, 1, 2, 3, 4, 4, 5])
// [2, 4, 4, 5]

R.drop(3, [1, 2, 3, 4, 5])
// [4, 5]

R.dropLast(3, [1, 2, 3, 4, 5])
// [1, 2]

R.pluck('name', students)
// ['Oliver', 'Jack', 'Kyle', 'Joe']

R.flatten([1, 2, [3, 4, [5, 6]], 7])
// [1, 2, 3, 4, 5, 6, 7]

R.unnest([1, 2, [3, 4, [5, 6]], 7])
// [1, 2, 3, 4, [5, 6], 7]

R.count(isEven, [1, 1, 1, 8, 8])
// 2

R.any(isEven, [1, 2, 3])
// true

R.all(isEven, [1, 2, 3])
// false

R.zipObj(['x', 'y', 'z'], [1, 2, 3])
// {x: 1, y: 2, z: 3}

R.swap(0, -2, [1, 2, 3, 4, 5, 6])
// [5, 2, 3, 4, 1, 6]

R.move(0, -2, [1, 2, 3, 4, 5, 6])
// [2, 3, 4, 5, 1, 6]

R.filter(isEven, [1, 2, 3, 4])
// [2, 4]

R.reject(isEven, [1, 2, 3, 4])
// [1, 3]

R.reverse([1, 2, 3, 4])
// [4, 3, 2, 1]

R.range(50, 54)
// [50, 51, 52, 53]

R.partition(isEven, [1, 2, 3, 4])
// [[2, 4], [1, 3]]

R.map(R.toUpper, ['a', 'b', 'c'])
// ['A', 'B', 'C']

R.find(isEven, [1, 2, 3, 4])
// 2

R.reduce(R.add, 0, [1, 2, 3, 4])
// 10

R.transpose(matrix)
// [[1, 2, 3], ['a', 'b', 'c']]

// ============================== Object

R.prop('x', dot)
// 2

R.props(['x', 'y'], dot)
// [2, 4]

R.propOr(11, 'z', dot)
// 11

R.values(dot)
// [2, 4]

R.keys(dot)
// ['x', 'y']

R.toPairs(dot)
// [['x', 2], ['y', 4]]

R.path(['coords', 'x'], man)
// 10

R.pathOr(11, ['coords', 'z'], man)
// 11

R.pick(['name', 'age', 'ololo'], man)
// {name: 'John', age: 35}

R.pickAll(['name', 'age', 'ololo'], man)
// {name: 'John', age: 35, ololo: undefined}

R.pickBy((v, k) => v < 10, circle)
// {x: 8, y: 9}

R.project(['name', 'age'], [man, pig])
// [{name: 'John', age: 35}, {name: 'Peppa', age: 12}]

R.dissoc('r', circle)
// {x: 8, y: 9}

R.dissocPath(['coords', 'x'], man)
// {name: 'John', age: 35, hair: 'brown', coords: {y: 0}}

R.omit(['coords', 'hair'], man)
// {name: 'John', age: 35}

R.clone(man)
// {name: 'John', age: 35, hair: 'brown', coords: {x: 10, y: 0}}

R.has('hasOwnProperty', dot)
// false

R.hasIn('hasOwnProperty', dot)
// true

R.hasPath(['coords', 'x'], man)
// true

R.eqProps('hair', man, bear)
// true

R.assoc('z', 1, dot)
// {x: 2, y: 4, z: 1}
R.assoc('x', 4, dot)
// {x: 4, y: 4}

R.assocPath(['coords', 'y'], 2, man)
// {name: 'John', age: 35, hair: 'brown', coords: {x: 10, y: 2}}

R.modify('hair', R.toUpper, bear)
// {hair: 'BROWN', coords: {x: 12}}

R.evolve({
    name: R.toUpper,
    age: R.inc
}, man)
// {name: 'JOHN', age: 36, hair: 'brown', coords: {x: 10, y: 0}}

R.mergeLeft(bear, pig)
// {name: 'Peppa', age: 12, hair: 'brown', coords: {x: 12}}

R.mergeRight(bear, pig)
// {name: 'Peppa', age: 12, hair: 'pink', coords: {x: 14, y: 0}}

R.mergeAll([man, bear, pig])
// {name: 'Peppa', age: 12, hair: 'pink', coords: {x: 14, y: 0}}

R.where({
    x: isEven,
    y: isOdd
}, circle)
// true

R.whereEq({
    x: 8,
    y: 9
}, circle)
// true

// ============================== Logic

R.or(true, false)
// true; true || false

R.and(true, false)
// false; true && false

R.not(true)
// false; !true

R.xor(true, false)
// true

R.isEmpty([])
// true
R.isEmpty({})
// true
R.isEmpty('')
// true

R.defaultTo(11, null)
// 11
R.defaultTo(11, undefined)
// 11

R.complement(isEven)(4)
// false
R.complement(isEven)(5)
// true

R.both(
    (n) => n > 5,
    (n) => n < 10
)(7)
// true

R.allPass([
    (n) => n > 5,
    (n) => n < 10
])(7)
// true

R.either(
    (n) => n === 3,
    (n) => n > 5
)(22)
// true

R.anyPass([
    (n) => n === 3,
    (n) => n > 5
])(22)
// true

R.ifElse(
    (n) => n > 99,
    () => 99,
    (n) => n
)(101)
// 99

R.when(
    (n) => n > 99,
    () => 99,
    101
)
// 99
R.when(
    (n) => n > 99,
    () => 99,
    44
)
// 44

R.unless(
    (n) => n > 2,
    () => 3,
    5
)
// 5

R.cond([
    [(n) => n === 3, (n) => n * n],
    [(n) => n === 6, (n) => n + n],
    [() => true, () => 11]
])(2)
// 11

R.until(
    (n) => n > 10,
    (n) => n + 3,
    1
)
// 13; 1 + 3 + 3 + 3 + 3

R.propSatisfies(
    (x) => x === 2,
    'x',
    dot
)
// true

R.pathSatisfies(
    (x) => x === 14,
    ['coords', 'x'],
    pig
)
// true

// ============================== Relation

R.gt(2, 10)
// false; 2 > 10

R.gte(2, 10)
// false; 2 >= 10

R.lt(2, 10)
// true; 2 < 10

R.lte(2, 10)
// true; 2 <= 10

R.min(6, 4)
// 4

R.max(6, 4)
// 6

R.clamp(10, 20, 25)
// 20
R.clamp(10, 20, 15)
// 15

R.equals(7, 7)
// true
R.equals([1, 2, 3], [1, 2, 3])
// true

R.propEq('John', 'name', man)
// true

R.difference([1, 1, 2, 3, 4, 4, 5], [1, 3, 7])
// [2, 4, 5]

R.intersection([1, 1, 2, 3, 4, 4, 5], [1, 3, 7])
// [1, 3]

R.union([1, 1, 2, 3, 4, 4, 5], [1, 3, 7])
// [1, 2, 3, 4, 5, 7]

// ============================== Function

R.identity(8)
// 8; (v) => v

R.always(8)()
// 8

R.T()
// true; () => true

R.F()
// false; () => false

// ============================== Type

R.is(Number, 1)
// true
R.is(String, '')
// true

R.isNil(null)
// true
R.isNil(undefined)
// true

R.type(1)
// 'Number'
R.type('1')
// 'String'
R.type(true)
// 'Boolean'
R.type([])
// 'Array'
R.type({})
// 'Object'

// ==============================

flip(concat|divide)
tap((x) => console.log('x = ', x))
tap(console.log) // вернет оригинал, но вызовет ф с этим аргументом
R.compose
R.pipe

R.pipe(
    R.inc,
    R.inc,
    R.inc,
    Math.round,
    R.inc,
    R.inc
)(2.1)
// 7

R.curry
R.__

const half = R.divide(R.__, 2);

R.pipe(
    R.add(2),
    half,
    R.inc
)(10)
// 7

R.pipe(
    R.add(2),
    R.divide(R.__, 2),
    R.inc
)(10)
// 7

ascend
descend
