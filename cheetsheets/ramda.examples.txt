const dot = { x: 2, y: 4 };

const circle = { x: 8, y: 9, r: 10 };

const man = {
    name: 'John',
    age: 35,
    hair: 'brown',
    coords: { x: 10, y: 0 }
};

const bear = {
    hair: 'brown',
    coords: { x: 12 }
};

const pig = {
    name: 'Peppa',
    age: 12,
    hair: 'pink',
    coords: { x: 14, y: 0 }
};

// ============================== Math

R.add(2, 3)
// 2 + 3 = 5

R.subtract(5, 3)
// 5 - 3 = 2

R.multiply(4, 4)
// 4 * 4 = 16

R.divide(15, 3)
// 15 / 3 = 5

R.inc(8)
// 8 + 1 = 9

R.dec(8)
// 8 - 1 = 7

R.negate(3)
// -3
R.negate(-3)
// 3

R.sum([1, 2, 3, 4])
// 1 + 2 + 3 + 4 = 10

R.product([2, 2, 4])
// 2 * 2 * 4 = 16

R.mean([2, 2, 26])
// (2 + 2 + 26) / 3 = 10

R.modulo(5, 3)
// 5 % 3 = 2
R.modulo(16, 2)
// 16 % 2 = 0

// ============================== String

R.toLower('Kyiv')
// 'kyiv'

R.toUpper('Kyiv')
// 'KYIV'

R.trim(' My name is ')
// 'My name is'

R.toString(true)
// 'true'
R.toString([1, 2, 3])
// '[1, 2, 3]'
R.toString({ x: 15, y: 0})
// '{"x": 15, "y": 0}'

R.replace('Львов', 'Киев', 'Я люблю Львов')
// 'Я люблю Киев'

R.split('/', '2/7/2024')
// ['2', '7', '2024']

R.test(/Киев/, 'Я люблю Киев')
// true

R.match(/[a-z]a/g, 'bananas')
// ['ba', 'na', 'na']

// ============================== List

R.concat('Je', 'sus')
// 'Jesus'
R.concat([1, 1], [2, 3])
// [1, 1, 2, 3]

R.head('Jesus')
// 'J'
R.head([2, 3, 4])
// 2

R.last('Jesus')
// 's'
R.last([2, 3, 4])
// 4

R.tail('Jesus')
// 'esus'
R.tail([2, 3, 4])
// [3, 4]

R.length('Jesus')
// 5
R.length([2, 3, 4])
// 3

// ============================== Object

R.prop('x', dot)
// 2

R.props(['x', 'y'], dot)
// [2, 4]

R.propOr(11, 'z', dot)
// 11

R.values(dot)
// [2, 4]

R.keys(dot)
// ['x', 'y']

R.toPairs(dot)
// [['x', 2], ['y', 4]]

R.path(['document', 'title'], window)
// 'Ramda Documentation'

R.pathOr(11, ['document', 'ololo'], window)
// 11

R.pick(['protocol', 'hash', 'ololo'], location)
// { protocol: 'https:', hash: '#pick' }

R.pickAll(['protocol', 'hash', 'ololo'], location)
// { protocol: 'https:', hash: '#pick', ololo: undefined }

R.pickBy((v, k) => v < 10, circle)
// { x: 8, y: 9 }

R.project(['name', 'age'], [man, pig])
// [{name: 'John', age: 35}, {name: 'Peppa', age: 12}]

R.dissoc('r', circle)
// {x: 8, y: 9}

R.dissocPath(['coords', 'x'], man)
// {name: 'John', age: 35, hair: 'brown', coords: {y: 0}}

R.omit(['coords', 'hair'], man)
// {name: 'John', age: 35}

R.clone(man)
// {name: 'John', age: 35, hair: 'brown', coords: {x: 10, y: 0}}

R.has('hasOwnProperty', dot)
// false

R.hasIn('hasOwnProperty', dot)
// true

R.hasPath(['coords', 'x'], man)
// true

R.eqProps('hair', man, bear)
// true

R.assoc('z', 1, dot)
// {x: 2, y: 4, z: 1}
R.assoc('x', 4, dot)
// {x: 4, y: 4}

R.assocPath(['coords', 'y'], 2, man)
// {name: 'John', age: 35, hair: 'brown', coords: {x: 10, y: 2}}

R.mergeLeft(bear, pig)
// {name: 'Peppa', age: 12, hair: 'brown', coords: {x: 12}}

R.mergeRight(bear, pig)
// {name: 'Peppa', age: 12, hair: 'pink', coords: {x: 14, y: 0}}

R.mergeAll([man, bear, pig])
// {name: 'Peppa', age: 12, hair: 'pink', coords: {x: 14, y: 0}}

TODO: R.mergeDeepLeft
TODO: R.mergeDeepRight

// ============================== Logic

R.or(true, false)
// true || false => true

R.and(true, false)
// true && false => false

R.not(true)
// !true => false

R.xor(true, false)
// true

R.isEmpty([])
// true
R.isEmpty({})
// true
R.isEmpty('')
// true

R.defaultTo(11, null)
// 11
R.defaultTo(11, undefined)
// 11

R.complement((n) => n === 3)(5)
// true
R.complement((n) => n === 3)(3)
// false

R.both(
    (n) => n > 5,
    (n) => n < 10
)(7)
// true

R.allPass([
    (n) => n > 5,
    (n) => n < 10
])(7)
// true

R.either(
    (n) => n === 3,
    (n) => n > 5
)(22)
// true

R.anyPass([
    (n) => n === 3,
    (n) => n > 5
])(22)
// true

R.ifElse(
    (n) => n > 99,
    () => 99,
    (n) => n
)(101)
// 99

R.when(
    (n) => n > 99,
    () => 99,
    101
)
// 99

R.unless(
    (n) => n > 99,
    () => 99,
    45
)
// 99

R.cond([
    [(n) => n === 3, (n) => n * n],
    [(n) => n === 6, (n) => n + n],
    [() => true, () => 11]
])(2)
// 11

R.until(
    (n) => n > 100,
    (n) => n + 3,
    1
)
// 1 + 3 + 3 + 3 + 3 + ... => 103

R.propSatisfies(
    (x) => x === 2,
    'x',
    dot
)
// true

R.pathSatisfies(
    (x) => x === 14,
    ['coords', 'x'],
    pig
)
// true

// ============================== Relation

R.gt(10, 2)
// 10 > 2 => true

R.gte(10, 2)
// 10 >= 2 => true

R.lt(2, 10)
// 2 < 10 => true

R.lte(2, 10)
// 2 <= 10 => true

R.min(6, 4)
// 4

R.max(6, 4)
// 6

// ============================== Function

R.identity(8)
// (v) => v; 8

R.always(8)()
// 8

R.T()
// () => true; true

R.F()
// () => false; false

// ============================== Type

R.is(Number, 1)
// true
R.is(String, '')
// true




R.pipe

R.pipe(
    R.inc,
    R.inc,
    R.inc,
    Math.round,
    R.inc,
    R.inc
)(2.1)
// 7

R.curry
R.__

const half = R.divide(R.__, 2);

R.pipe(
    R.add(2),
    half,
    R.inc
)(10)
// 7

R.pipe(
    R.add(2),
    R.divide(R.__, 2),
    R.inc
)(10)
// 7
