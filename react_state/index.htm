<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>React State</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>
    <style>
        body {
            padding-top: 50px;
        }

        .z {
            color: red;
            margin: 1em 0;
        }

        .hidden {
            display: none;
        }

        .t {
            font-style: italic;
        }

        .t99 {
            padding: 10px;
            background: #8fff00;
        }

        .t97 {
            color: #fff;
            background: #144d74;
            padding: 15px;
            margin: 0;
            font-style: normal;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 9999;
        }

        .t97 a {
            color: #ffd600;
        }

        .t97 button {
            float: right;
        }

        #ab {
            border: 1px dashed orange;
        }

        .hi {
            background: yellow;
        }
    </style>

    <style>
        .whores-container {
            background: #751a1a;
            width: 910px;
            height:  474px;
            padding: 10px;
            overflow: hidden;
            margin-bottom: 1em;
        }

        .whore {
            background: white;
            padding: 10px;
            width: 200px;
            position: relative;
            font-family: Arial, sans-serif;
            font-size: 15px;
            cursor: pointer;
            float: left;
            margin: 0 0 10px 10px;
        }

        .whore:first-child {
            margin-left: 0;
        }

        .whore-name {
            font-size: 22px;
            font-family: Tahoma, sans-serif;
            margin-bottom: 5px;
            color: #7b1e1e;
        }

        .whore img {
            margin-bottom: 10px;
        }

        .whore-teaser {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            box-sizing: border-box;
            padding: 10px;
            display: none;
        }

        .whore:hover .whore-teaser {
            display: block;
        }

        .whore-phone {
            font-size: 18px;
            font-weight: bold;
            margin: 5px 0 1px;
        }
    </style>

    <script>
        var jasmine = {
            name: 'Жасмин',
            photo: 'images/zhasmin.jpg',
            age: '18',
            boobs: '3',
            weight: '50',
            height: '168',
            phone: '+380960000000',
            can_come: true,
            teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
        };
    </script>

    <style>
        .cats-container {
            width: 600px;
            height: 200px;
            margin-bottom: 1em;
        }

        .cat-container-1,
        .cat-container-2 {
            float: left;
            width: 49%;
            height: 200px;
            box-sizing: border-box;
            padding: 10px;
            border: 1px dashed #000;
            margin-left: 0.5%;
        }
    </style>

    <style>
        .tooth-container {
            width: 600px;
            height: 266px;
            padding: 5px;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tooth + .boy {
            display: none;
        }
    </style>

    <style>
        .ski-resort {
            width: 600px;
            height: 170px;
            border: 1px solid #000;
            position: relative;
            overflow-x: auto;
            overflow-y: hidden;
            margin-bottom: 1em;
        }

        .skier {
            width: 150px;
            transform: scale(-1, 1);
            position: absolute;
            top: 85px;
            left: 0;
        }
    </style>

    <style>
        .mikki_tiles {
            width: 400px;
            height: 400px;
            border: 1px solid black;
        }

        .mikki_tile {
            width: 20px;
            height: 20px;
            float: left;
        }
    </style>

    <script>
        var mikki = [
            '  XXXX        XXXX  ',
            ' XXXXXX      XXXXXX ',
            'XXXX XX XXXX XX XXXX',
            'XXX  XXXXXXXXXX  XXX',
            'XXXXXXXXXXXXXXXXXXXX',
            'XXXXXXX      XXXXXXX',
            ' XXXXX        XXXXX ',
            '   XXX  XX XX XXX   ',
            '    XX  XX XX XX    ',
            '    XXX X  X  XX    ',
            '    X         XX    ',
            '    X    XXX  XX    ',
            '    XX   XXX  XX    ',
            '     XX      XX     ',
            '      X  XX  X      ',
            '       X    X       ',
            '     XX XXXX XX     ',
            '     XX      XX     ',
            '    XX        XX    ',
            '   XXXXXXXXXXXXXX   '
        ];
    </script>

    <style>
        .scene {
            width: 800px;
            height: 272px;
            position: relative;
            overflow: hidden;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tile {
            width: 16px;
            height: 16px;
            position: absolute;
            background-image: url('images/mario_tileset.png');
            background-repeat: no-repeat;
            background-position: 16px 16px;
        }

        .tile.x_z {
            background-position: -96px -112px;
        }
        .tile.x_k {
            background-position: -144px -112px;
        }
        .tile.x_c {
            background-position: -128px -112px;
        }
        .tile.x_t {
            background-position: 0 -48px;
            width: 32px;
            height: 48px;
        }
        .tile.x_g {
            background-position: 0 -128px;
            width: 48px;
            height: 32px;
        }
        .tile.x_b {
            background-position: -144px -208px;
            width: 80px;
            height: 48px;
        }
        .tile.x_d {
            background-position: 0 -96px;
            width: 80px;
            height: 32px;
        }
        .tile.x_w {
            background-position: -96px -224px;
            width: 48px;
            height: 32px;
        }
    </style>

    <script>
        var map = [
            '                                                  ',
            '                                                  ',
            '                                                  ',
            '                    w                             ',
            '                                       w          ',
            '                                                  ',
            '                       c                          ',
            '                                                  ',
            '                                        c         ',
            '                                                  ',
            '                c    kkkkk                        ',
            ' b                                     t        c ',
            '            d    g       d                        ',
            '                                                  ',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
        ];
    </script>

    <style>
        .slide {
            width: 302px;
            height: 347px;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            display: none;
        }

        .slide.active {
            display: block;
        }

        .pagination {
            margin: 1em 0;
        }
    </style>

    <style>
        .question {
            color: #0078d7;
            padding: 10px 20px 10px;
            border-top: 1px solid #d2d2d2;
            cursor: pointer;
        }

        .question:hover {
            background: #e6e6e6;
        }

        .answer {
            padding: 10px 20px 10px;
            margin: 0;
            display: none;
        }

        .question.active + .answer {
            display: block;
        }
    </style>

    <style>
        .tabs {
            border-bottom: 1px solid black;
            width: 400px;
        }

        .tabs .item {
            background: grey;
            border: 1px solid black;
            border-radius: 10px 10px 0 0;
            display: inline-block;
            margin-bottom: -1px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .tabs .item:hover,
        .tabs .item.active {
            background: lightgray;
        }

        .tabs-content .item {
            display: none;
        }

        .tabs-content .item.active {
            display: block;
        }
    </style>

    <style>
        .overlay {
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: black;
            opacity: 0.8;
        }

        .pop-up {
            position: fixed;
            left: 50%;
            top: 50%;
            margin-top: -200px;
            margin-left: -150px;
            background: white;
            border-radius: 10px;
            width: 300px;
            height: 400px;
            padding: 20px;
            box-sizing: border-box;
        }

        .pop-up input {
            margin-bottom: 10px;
            display: block;
        }

        .pop-up .close {
            position: absolute;
            width: 30px;
            height: 30px;
            text-align: center;
            line-height: 30px;
            background: black;
            color: white;
            border-radius: 50%;
            right: -15px;
            top: -15px;
            cursor: pointer;
            font-family: Tahoma, sans-serif;
            border: none;
        }

        .pop-up .close:hover {
            background: #912626;
        }
    </style>

    <div id="app"></div>

    <script type="text/babel">
        class TaskChangeColor extends React.Component {
            state = {
                color: 'green'
            };

            onClick = () => {
                this.setState({
                    color: 'tomato'
                })
            };

            render() {
                const {color} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет текста</p>
                        <p className="t t1" style={{color: color}}>Тест</p>
                        <button className="b b1" onClick={this.onClick}>Изменить цвет текста</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColor extends React.Component {
            state = {
                backgroundColor: 'yellow'
            };

            onClick = () => {
                this.setState({
                    backgroundColor: 'tomato'
                })
            };

            render() {
                const {backgroundColor} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет фона</p>
                        <p className="t t2" style={{backgroundColor}}>Тест</p>
                        <button className="b b2" onClick={this.onClick}>Изменить цвет фона</button>
                    </>
                );
            }
        }

        class TaskChangeHref extends React.Component {
            state = {
                href: 'https://backbonejs.org/'
            };

            onClick = () => {
                this.setState({
                    href: 'https://www.youtube.com/watch?v=TcDQjbaXXn0'
                })
            };

            render() {
                const {href} = this.state;
                const {onClick} = this;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь ссылки</p>
                        <p className="t t3"><a href={href}>Тест</a></p>
                        <button className="b b3" onClick={onClick}>Изменить путь ссылки</button>
                    </>
                );
            }
        }

        class TaskChangeSrc extends React.Component {
            state = {
                src: 'images/kaktus.jpg',
                width: 100
            };

            onClick = () => {
                this.setState({
                    src: 'images/mushroom soup.jpg',
                    width: 400
                })
            };

            render() {
                const {src, width} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь к картинке</p>
                        <p className="t t4">Тест <img src={src} width={width} /></p>
                        <button className="b b4" onClick={this.onClick}>Изменить путь к картинке</button>
                    </>
                );
            }
        }

        class TaskChangeId extends React.Component {
            state = {
                id: 'ab'
            };

            onClick = () => {
                this.setState({
                    id: 'abc'
                })
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить id элемента</p>
                        <p className="t t5" id={this.state.id}>Тест</p>
                        <button className="b b5" onClick={this.onClick}>Изменить id элемента</button>
                    </>
                );
            }
        }

        class TaskChangeText extends React.Component {
            state = {
                text: 'Тест'
            };

            onClick = () => {
                this.setState({
                    text: 'Change text'
                })
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить текст</p>
                        <p className="t t6">{this.state.text}</p>
                        <button className="b b6" onClick={this.onClick}>Изменить текст</button>
                    </>
                );
            }
        }

        class TaskChangeHtml extends React.Component {
            state = {
                html: '<b>Цветы</b>'
            };

            onClick = () => {
                this.setState({
                    html: '<i>Цветы</i>'
                })
            };

            render() {
                const {html} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить HTML</p>
                        <p className="t t7" dangerouslySetInnerHTML={{__html: html}}></p>
                        <button className="b b7" onClick={this.onClick}>Изменить HTML</button>
                    </>
                );
            }
        }

        class TaskChangeFontSize extends React.Component {
            state = {
                fontSize: '18px'
            };

            onClick = () => {
                this.setState({
                    fontSize: '26px'
                })
            };

            render() {
                const {fontSize} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку изменить размер шрифта</p>
                        <p className="t t8" style={{fontSize}}>Тест</p>
                        <button className="b b8" onClick={this.onClick}>Изменить размер шрифта</button>
                    </>
                );
            }
        }

        class TaskChangeAddClass extends React.Component {
            state = {
                className: 't t9'
            };

            onClick = () => {
                this.setState({
                    className: 't t9 hi'
                })
            };

            render() {
                const {className} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку добавить класс 'hi'</p>
                        <p className={className}>Тест</p>
                        <button className="b b9" onClick={this.onClick}>Добавить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeRemoveClass extends React.Component {
            state = {
                className: 't t10 hi'
            };

            onClick = () => {
                this.setState({
                    className: 't t10'
                })
            };

            render() {
                const {className} = this.state;

                return (
                    <>
                        <p className="z">При клике на кнопку удалить класс 'hi'</p>
                        <p className={className}>Тест</p>
                        <button className="b b10" onClick={this.onClick}>Удалить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeToggleClass extends React.Component {
            // state = {
            //     className: 't t11'
            // };
            //
            // onClick = () => {
            //     this.setState((state) => ({
            //         className: state.className === 't t11' ? 't t11 hi' : 't t11'
            //     }));
            // };

            state = {
                hasClass: false
            };

            onClick = () => {
                this.setState((state) => ({
                    hasClass: !state.hasClass
                }));
            };

            render() {
                const {hasClass} = this.state;
                const className = hasClass ? 't t11 hi' : 't t11';

                return (
                    <>
                        <p className="z">При клике на кнопку добавлять/удалять (в зависимости от наличия) класс 'hi'</p>
                        <p className={className}>Тест</p>
                        <button className="b b11" onClick={this.onClick}>Добавить/удалить (в зависимости от наличия) класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskShowClass extends React.Component {
            state = {
                className: 'Тест'
            };

            render() {
                return (
                    <>
                        <p className="z">При клике на любом элементе страницы выводить значение атрибута class элемента</p>
                        <p className="t t12">{this.state.className}</p>
                    </>
                );
            }

            onClick = (e) => {
                this.setState({
                    className: e.target.className
                })
            };

            componentDidMount() {
                document.addEventListener('click', this.onClick);
            }
        }

        // Пропускаем!
        class TaskTodo1 extends React.Component {
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку перевести текст на английский язык (перевод хранится в атрибуте data-en элемента)</p>
                        <p className="t t13" data-en="sun">Солнце</p>
                        <button className="b b13">Перевести</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColorOnResize extends React.Component {
            state = {
                backgroundColor: 'rgb(111, 111, 111)'
            };

            onResize = () => {
                const r = (Math.round(Math.random() * 255));
                const g = (Math.round(Math.random() * 255));
                const b = (Math.round(Math.random() * 255));

                this.setState({
                    backgroundColor: `rgb(${r}, ${g}, ${b})`
                })
            };

            render() {
                const {backgroundColor} = this.state;

                return (
                    <>
                        <p className="z">При изменении размеров окна вкладки или браузера изменять фоновый цвет абзаца (использовать RGB и Math.random)</p>
                        <p className="t t99" style={{backgroundColor}}>Drugs are bad, m'kay, so, if you do drugs, you're bad, m'kay, because drugs are bad.</p>
                    </>
                );
            }

            componentDidMount() {
                window.addEventListener('resize', this.onResize);
            }
        }

        class TaskInputWithCounter extends React.Component {
            state = {
                text: 'Я не касался писи козла!'
            };

            onChange = (e) => {
                this.setState({
                    text: e.target.value
                });
            };

            render() {
                const {text} = this.state;

                return (
                    <>
                        <p className="z">При изменении значения элемента формы выводить количество символов которое оно содержит</p>
                        <p className="t t98"><input type="text" value={text} onChange={this.onChange} /> <span className="t98-2">{text.length}</span></p>
                    </>
                );
            }
        }

        // TODO:
        class TaskWhores extends React.Component {
            state = {
                whores: [
                    {
                        name: 'Сильвия',
                        photo: 'images/silvia.jpg',
                        age: '32',
                        hair: 'блондинка',
                        boobs: '3',
                        weight: '60',
                        height: '170',
                        phone: '+380960000000',
                        can_come: true,
                        teaser: 'Я - симпатичная девочка экзотической внешности без\n' +
                            'комплексов и с огромной любовью к сексу! Я непревзойденная любовница, страстная,\n' +
                            'доступная и яркая! Я невероятно сексуальна и изобретательна, мила и\n' +
                            'непосредственна. Не теряй времени, звони мне, мой друг! Я скрашу твоё\n' +
                            'одиночество :)'
                    }
                ]
            };

            onClick = () => {
                this.setState({
                    whores: [
                        ...this.state.whores,
                        {
                            name: 'Жасмин',
                            photo: 'images/zhasmin.jpg',
                            age: '18',
                            hair: 'брюнетка',
                            boobs: '3',
                            weight: '50',
                            height: '168',
                            phone: '+380960000000',
                            can_come: true,
                            teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
                        }
                    ]
                })
            };

            render() {
                return (
                    <>
                        <p className="z">Вывести на экран анкету Жасмин используя переменную jasmine (смотри исходный код) двумя способами (созданием элементов, конкатенацией)</p>

                        <div className="whores-container">
                            {
                                this.state.whores.map((whore, index) => {
                                    return (
                                        <div className="whore">
                                            <div className="whore-name">{whore.name}</div>
                                            <img src={whore.photo} width="200" />
                                            <div className="whore-age">Возраст: {whore.age}</div>
                                            <div className="whore-boobs">Размер груди: {whore.boobs}</div>
                                            <div className="whore-height">Рост: {whore.height}</div>
                                            <div className="whore-weight">Вес: {whore.weight}</div>
                                            <div className="whore-phone">{whore.phone}</div>
                                            <div className="whore-can-come">Выезд: {`${whore.can_come ? ' + ': ' - '}`}</div>
                                            <div className="whore-teaser">{whore.teaser}
                                            </div>
                                        </div>
                                    )
                                })
                            }
                        </div>

                        <button className="b b14" onClick={this.onClick}>Добавить анкету</button>
                    </>
                );
            }
        }

        class TaskFish extends React.Component {
            state = {
                container: 1
            };

            onClick = () => {
                this.setState((state) => ({
                    container: state.container === 1 ? 2 : 1
                }));
            };

            render() {
                const fish = <img src="images/fish.jpg" className="fish" width="50" />;
                const {container} = this.state;

                return (
                    <>
                        <p className="z">Переместить рыбу из первого контейнера во второй (при повторном клике из второго в первый и т.д.)</p>

                        <div className="cats-container">
                            <div className="cat-container-1">
                                <img className="cat" src="images/kat.png" width="100" />
                                {container === 1 ? fish : null}
                            </div>

                            <div className="cat-container-2">
                                <img className="cat" src="images/kat.png" width="100" />
                                {container === 2 ? fish : null}
                            </div>
                        </div>

                        <button className="b b15" onClick={this.onClick}>Переместить рыбу</button>
                    </>
                );
            }
        }

        class TaskTooth extends React.Component {
            state = {
                hasTooth: true
            };

            onClick = () => {
                this.setState({hasTooth: false});
            };

            render() {
                const tooth = <img className="tooth" src="images/tooth.jpg" width="200" />;

                return (
                    <>
                        <p className="z">Удалить зуб</p>

                        <div className="tooth-container">
                            {this.state.hasTooth ? tooth : null}
                            <img className="boy" src="images/bro.jpg" width="600" />
                        </div>

                        <button className="b b16" onClick={this.onClick}>Удалить зуб</button>
                    </>
                );
            }
        }

        class TaskSkier extends React.Component {
            state = {
                x: 0
            };

            move = () => {
                this.setState((state) => ({
                    x: state.x + 5
                }));
            };

            start = () => {
                this.intervalId = setInterval(this.move, 16);
            };

            stop = () => {
                clearInterval(this.intervalId);
            };

            render() {
                const style = {
                    left: this.state.x + 'px'
                };

                return (
                    <>
                        <p className="z">Хочу чтоб лыжник бесконечно ехал вправо (сдвиг на 5px каждые 16ms). При нажатии на кнопку "Стоп!" останавливался.</p>

                        <div className="ski-resort">
                            <img className="skier" src="images/skier.gif" style={style} />
                        </div>

                        <button className="b b17" onClick={this.start}>Поехали!</button>
                        <button className="b b17-2" onClick={this.stop}>Стоп!</button>
                    </>
                );
            }
        }

        class TaskMikki extends React.Component {
            mikki = [
                '  XXXX        XXXX  ',
                ' XXXXXX      XXXXXX ',
                'XXXX XX XXXX XX XXXX',
                'XXX  XXXXXXXXXX  XXX',
                'XXXXXXXXXXXXXXXXXXXX',
                'XXXXXXX      XXXXXXX',
                ' XXXXX        XXXXX ',
                '   XXX  XX XX XXX   ',
                '    XX  XX XX XX    ',
                '    XXX X  X  XX    ',
                '    X         XX    ',
                '    X    XXX  XX    ',
                '    XX   XXX  XX    ',
                '     XX      XX     ',
                '      X  XX  X      ',
                '       X    X       ',
                '     XX XXXX XX     ',
                '     XX      XX     ',
                '    XX        XX    ',
                '   XXXXXXXXXXXXXX   '
            ];

            getTiles() {
                const {mikki} = this;
                const tiles = [];

                for (let i = 0; i < mikki.length; i++) {
                    for (let j = 0; j < mikki[i].length; j++) {
                        const style = mikki[i][j] === 'X' ? {backgroundColor: 'black'} : null;
                        tiles.push(<div className="mikki_tile" style={style}></div>);
                    }
                }

                return tiles;
            }

            render() {
                return (
                    <>
                        <p className="z">Хочу такое (смотри исходный код) <img src="images/mikki.png" /></p>
                        <div className="mikki_tiles">{this.getTiles()}</div>
                    </>
                );
            }
        }

        class TaskMario extends React.Component {
            state = {
                showMap: false
            };

            map = [
                '                                                  ',
                '                                                  ',
                '                                                  ',
                '                    w                             ',
                '                                       w          ',
                '                                                  ',
                '                       c                          ',
                '                                                  ',
                '                                        c         ',
                '                                                  ',
                '                c    kkkkk                        ',
                ' b                                     t        c ',
                '            d    g       d                        ',
                '                                                  ',
                'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
                'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
                'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
            ];

            getTiles() {
                const {map} = this;
                const tiles = [];

                for (let i = 0; i < map.length; i++) {
                    for (let j = 0; j < map[i].length; j++) {
                        const style = {
                            top: i * 16 + 'px',
                            left: j * 16 + 'px'
                        };

                        let className = 'tile ';

                        if (map[i][j] === 'w') {
                            className += 'x_w';
                        }
                        if (map[i][j] === 'c') {
                            className += 'x_c';
                        }
                        if (map[i][j] === 'k') {
                            className += 'x_k';
                        }
                        if (map[i][j] === 'd') {
                            className += 'x_d';
                        }
                        if (map[i][j] === 't') {
                            className += 'x_t';
                        }
                        if (map[i][j] === 'g') {
                            className += 'x_g';
                        }
                        if (map[i][j] === 'b') {
                            className += 'x_b';
                        }
                        if (map[i][j] === 'z') {
                            className += 'x_z';
                        }

                        tiles.push(<div className={className} style={style}></div>);
                    }
                }

                return tiles;
            }

            onClick = () => {
                this.setState({showMap: true});
            };

            render() {
                const {showMap} = this.state;
                const tiles = showMap ? this.getTiles() : null;

                return (
                    <>
                        <>
                            <p className="z">Создать мир Марио <img src="images/mario.png" /></p>
                            <div className="scene">{tiles}</div>
                            <button className="b b18" onClick={this.onClick}>Создать мир</button>
                        </>
                    </>
                );
            }
        }

        class TaskSlider extends React.Component {
            state = {
                activeSlideIndex: 0
            };

            images = [
                'images/slide1.jpg',
                'images/slide2.jpg',
                'images/slide3.jpg',
                'images/slide4.jpg',
                'images/slide5.jpg'
            ];

            next = () => {
                const {images} = this;

                this.setState((state) => ({
                    activeSlideIndex: state.activeSlideIndex === images.length - 1 ?
                        0 :
                        state.activeSlideIndex + 1
                }));
            };

            previous = () => {
                const {images} = this;

                this.setState((state) => ({
                    activeSlideIndex: state.activeSlideIndex === 0 ?
                        images.length - 1 :
                        state.activeSlideIndex - 1
                }));
            };

            getSlides = () => {
                const {activeSlideIndex} = this.state;
                const {images} = this;

                return (
                    images.map((image, index) => {
                        const className = index === activeSlideIndex ? 'slide active' : 'slide';
                        return <img src={image} className={className} />;
                    })
                );
            };

            render() {
                return (
                    <>
                        <p className="z">Кликая по кнопкам "предыдущая" и "следующая" я хочу чтобы менялись соответственно слайды</p>

                        <div className="slider">
                            {this.getSlides()}
                        </div>

                        <div className="pagination">
                            <button className="previous" onClick={this.previous}>Previous</button>
                            <button className="next" onClick={this.next}>Next</button>
                        </div>
                    </>
                )
            };
        }

        // TODO:
        class TaskFaq extends React.Component {
            state = {
                activeIndex: 0
            };

            items = [
                {
                    question: `В чем разница между 32-разрядной и 64-разрядной версиями Windows?`,
                    answer: `Термины "32-разрядный" и "64-разрядный" описывают, каким образом процессор компьютера
                    (он также называется ЦП) обрабатывает информацию. 64-разрядная версия Windows обрабатывает
                    большие объемы оперативной памяти (ОЗУ) более эффективно по сравнению с 32-разрядной версией.
                    Не все устройства могут работать под управлением 64-разрядных версий Windows.`
                },
                {
                    question: `Моя копия Windows приобретена через учебное заведение. Можно ли скачать её здесь?`,
                    answer: `Да, но вам потребуется ключ продукта. Перейдите на страницу загрузок <b>Академические
                    продукты</b> и выберите версию Windows, чтобы начать.`
                },
                {
                    question: `Что делать после создания носителя с помощью средства создания носителя?`,
                    answer: `<p>
                    Чтобы установить Windows, после создания установочного носителя выполните одно из
                    следующих действий:
                    </p>
                    <ul>
                    <li>
                    Подключите USB-устройство флэш-памяти к компьютеру, на который необходимо установить
                    Windows, найдите его в проводнике и откройте файл setup.exe. Выполняйте инструкции,
                    отображаемые в ходе установки.
                    </li>
                    <li>
                    Если ваш компьютер настроен на загрузку с USB-накопителя, подключите USB-устройство
                    флэш-памяти к компьютеру, на который необходимо установить Windows, перезагрузите его,
                    а затем следуйте инструкциям по установке.
                    </li>
                    <li>
                    Если компьютер настроен на загрузку с DVD-дисковода, вставьте DVD-диск в компьютер,
                    перезагрузите компьютер, а затем следуйте инструкциям по установке.
                    </li>
                    </ul>`
                },
                {
                    question: `Этот образ диска загрузочный?`,
                    answer: `Образ диска с этого сайта можно использовать для создания загрузочных USB-носителей и
                    DVD-дисков, которые предоставляют доступ к средствам восстановления.`
                }
            ];

            toggleClass = (e) => {
                document.querySelectorAll('.question').forEach((el, index) => {
                    if (this.state.activeIndex === index) {
                        el === e.target ? this.setState({activeIndex: null}) : null;
                    } else {
                        el === e.target ? this.setState({activeIndex: index}) : null;
                    }
                })
            };

            render() {
                const {items} = this;

                return (
                    <>
                        <p className="z">Кликая вопросам я хочу видеть ответы на них</p>

                        <dl className="faq" onClick={this.toggleClass}>
                            {
                                items.map((item, index) => {
                                    return (
                                        <>
                                            <dt className={this.state.activeIndex === index ? 'question active': 'question'}>{item.question}</dt>
                                            <dd className="answer" dangerouslySetInnerHTML={{__html: item.answer}}></dd>
                                        </>
                                    );
                                })
                            }
                        </dl>
                    </>
                )
            };
        }

        // TODO:
        class TaskTabs extends React.Component {
            state = {
                data: 'today'
            };

            tabs = [
                {
                    data: 'today',
                    text: 'Сегодня'
                },
                {
                    data: 'tomorrow',
                    text: 'Завтра'
                },
                {
                    data: '23d',
                    text: '23 декабря'
                }
            ];

            contentTabs = [
                {
                    data: 'today',
                    content: `<ul>
                                <li>Звёздные войны: Последние джедаи</li>
                                <li>Счастливый день смерти</li>
                                <li>Дыши</li>
                              </ul>`
                },
                {
                    data: 'tomorrow',
                    content: `<ul>
                                <li>Киборги</li>
                                <li>Земля троллей</li>
                                <li>За пропастью во ржи</li>
                              </ul>`
                },
                {
                    data: '23d',
                    content: `<ul>
                                <li>Мой любимый динозавр</li>
                                <li>Фердинанд</li>
                                <li>Джуманджи: Зов джунглей</li>
                            </ul>`
                }
            ];

            onClick = (e) => {
                if (e.target.className === 'item') {
                    this.setState({data: e.target.dataset.tab})
                }
            };

            render() {
                return (
                    <>
                        <p className="z">Кликая по вкладкам я хочу видеть связанное содержимое</p>

                        <h2>Сеансы</h2>

                        <div className="tabs" onClick={this.onClick}>
                            {
                                this.tabs.map((el, index) => {
                                    return (
                                        <div className={el.data === this.state.data ? 'item active' : 'item'} data-tab={el.data}>{el.text}</div>
                                    )
                                })
                            }
                        </div>

                        <div className="tabs-content">
                            {
                                this.contentTabs.map((el, index) => {
                                    return (
                                        <div className={el.data === this.state.data ? 'item active' : 'item'} data-tab={el.data} dangerouslySetInnerHTML={{__html: el.content}}></div>
                                    )
                                })
                            }
                        </div>
                    </>
                );
            }
        }

        class TaskPopUp extends React.Component {
            state = {
                showPopUp: false
            };

            onClickOpen = () => {
                this.setState({
                    showPopUp: true
                })
            };

            onClickClose = () => {
                this.setState({
                    showPopUp: false
                })
            };

            render() {
                const {showPopUp} = this.state;

                return (
                    <>
                        <p className="z">Кликая на кнопку Login я хочу чтобы затенялся экран и по середине экрана появлялось окошко для авторизации закрыть которое можно кликнув по кнопке с крестиком</p>

                        {
                            showPopUp ?
                                <>
                                    <div className="overlay"></div>
                                    <div className="pop-up pop-up--login">
                                        <button className="close" onClick={this.onClickClose}>x</button>
                                        <input type="text" placeholder="Username" />
                                        <input type="password" placeholder="Password" />
                                        <button className="login">Login</button>
                                    </div>
                                </> :
                                null
                        }

                        <button className="show-login-pop-up" onClick={this.onClickOpen}>Login</button>
                    </>
                );
            }
        }

        class TaskLink extends React.Component {
            onClick = (e) => {
                e.preventDefault();
            };

            render() {
                return (
                    <>
                        <p className="z">Отменить действие по-умолчанию при клике на ссылку</p>

                        <p><a href="https://ebanoe.it/" className="link-ebanoe" target="_blank" onClick={this.onClick}>Ebanoe.IT — голая правда о нашем айти</a></p>
                    </>
                );
            }
        }

        class TaskAd extends React.Component {
            state= {
                showAd: true
            };

            onClick = () => {
                localStorage.setItem('showAd', 'false');
                this.setState({
                    showAd: false
                })
            };

            componentDidMount = () => {
                if (localStorage.getItem('showAd') === 'false') {
                    this.setState({
                        showAd: false
                    });
                }
            };

            render() {
                const {showAd} = this.state;
                const style = {
                    display: showAd ? 'block' : 'none'
                };

                return (
                    <>
                        <p className="z">Надоела реклама про увеличение члена? При клике на кнопку "Больше не показывать" заноси в localStorage значение которое будешь проверять при загрузке страницы</p>
                        <p className="t t97" style={style}>Хочешь увеличить член? Заходи <a href="http://pornhub.com" target="_blank">сюда</a>! <button className="b97" onClick={this.onClick}>Больше не показывать</button></p>
                    </>
                );
            }
        }

        var App = function() {
            return (
                <>
                    <TaskChangeColor />
                    <TaskChangeBackgroundColor />
                    <TaskChangeHref />
                    <TaskChangeSrc />
                    <TaskChangeId />
                    <TaskChangeText />
                    <TaskChangeHtml />
                    <TaskChangeFontSize />
                    <TaskChangeAddClass />
                    <TaskChangeRemoveClass />
                    <TaskChangeToggleClass />
                    <TaskShowClass />
                    <TaskChangeBackgroundColorOnResize />
                    <TaskInputWithCounter />
                    <TaskWhores />
                    <TaskFish />
                    <TaskTooth />
                    <TaskSkier />
                    <TaskMikki />
                    <TaskMario />
                    <TaskSlider />
                    <TaskFaq />
                    <TaskTabs />
                    <TaskPopUp />
                    <TaskLink />
                    <TaskAd />
                </>
            );
        };

        ReactDOM.render(<App />, document.querySelector('#app'));
    </script>
</body>
</html>