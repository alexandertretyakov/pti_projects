<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Browser API VS React</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>
    <style>
        body {
            padding-top: 50px;
        }

        .z {
            color: red;
            margin: 1em 0;
        }

        .hidden {
            display: none;
        }

        .t {
            font-style: italic;
        }

        .t99 {
            padding: 10px;
            background: #8fff00;
        }

        .t97 {
            color: #fff;
            background: #144d74;
            padding: 15px;
            margin: 0;
            font-style: normal;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 9999;
        }

        .t97 a {
            color: #ffd600;
        }

        .t97 button {
            float: right;
        }

        #ab {
            border: 1px dashed orange;
        }

        .hi {
            background: yellow;
        }
    </style>

    <style>
        .whores-container {
            background: #751a1a;
            width: 910px;
            min-height:  474px;
            padding: 10px;
            overflow: hidden;
            margin-bottom: 1em;
        }

        .whore {
            background: white;
            padding: 10px;
            width: 200px;
            position: relative;
            font-family: Arial, sans-serif;
            font-size: 15px;
            cursor: pointer;
            float: left;
            margin: 0 0 10px 10px;
        }

        .whore:first-child {
            margin-left: 0;
        }

        .whore-name {
            font-size: 22px;
            font-family: Tahoma, sans-serif;
            margin-bottom: 5px;
            color: #7b1e1e;
        }

        .whore img {
            margin-bottom: 10px;
        }

        .whore-teaser {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            box-sizing: border-box;
            padding: 10px;
            display: none;
        }

        .whore:hover .whore-teaser {
            display: block;
        }

        .whore-phone {
            font-size: 18px;
            font-weight: bold;
            margin: 5px 0 1px;
        }
    </style>

    <script>
        var Jasmine = {
            name: 'Жасмин',
            photo: 'images/zhasmin.jpg',
            age: '18',
            boobs: '3',
            weight: '50',
            height: '168',
            phone: '+380960000000',
            can_come: true,
            teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
        };
    </script>

    <style>
        .cats-container {
            width: 600px;
            height: 200px;
            margin-bottom: 1em;
        }

        .cat-container-1,
        .cat-container-2 {
            float: left;
            width: 49%;
            height: 200px;
            box-sizing: border-box;
            padding: 10px;
            border: 1px dashed #000;
            margin-left: 0.5%;
        }
    </style>

    <style>
        .tooth-container {
            width: 600px;
            height: 266px;
            padding: 5px;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tooth + .boy {
            display: none;
        }
    </style>

    <style>
        .ski-resort {
            width: 600px;
            height: 170px;
            border: 1px solid #000;
            position: relative;
            overflow-x: auto;
            overflow-y: hidden;
            margin-bottom: 1em;
        }

        .skier {
            width: 150px;
            transform: scale(-1, 1);
            position: absolute;
            top: 85px;
            left: 0;
        }
    </style>

    <style>
        .mikki_tiles {
            width: 400px;
            height: 400px;
            border: 1px solid black;
        }

        .mikki_tile {
            width: 20px;
            height: 20px;
            float: left;
        }
    </style>

    <script>
        var mikki = [
            '  XXXX        XXXX  ',
            ' XXXXXX      XXXXXX ',
            'XXXX XX XXXX XX XXXX',
            'XXX  XXXXXXXXXX  XXX',
            'XXXXXXXXXXXXXXXXXXXX',
            'XXXXXXX      XXXXXXX',
            ' XXXXX        XXXXX ',
            '   XXX  XX XX XXX   ',
            '    XX  XX XX XX    ',
            '    XXX X  X  XX    ',
            '    X         XX    ',
            '    X    XXX  XX    ',
            '    XX   XXX  XX    ',
            '     XX      XX     ',
            '      X  XX  X      ',
            '       X    X       ',
            '     XX XXXX XX     ',
            '     XX      XX     ',
            '    XX        XX    ',
            '   XXXXXXXXXXXXXX   '
        ];
    </script>

    <style>
        .scene {
            width: 800px;
            height: 272px;
            position: relative;
            overflow: hidden;
            border: 1px solid black;
            margin-bottom: 1em;
        }

        .tile {
            width: 16px;
            height: 16px;
            position: absolute;
            background-image: url('images/mario_tileset.png');
            background-repeat: no-repeat;
            background-position: 16px 16px;
        }

        .tile.x_z {
            background-position: -96px -112px;
        }
        .tile.x_k {
            background-position: -144px -112px;
        }
        .tile.x_c {
            background-position: -128px -112px;
        }
        .tile.x_t {
            background-position: 0 -48px;
            width: 32px;
            height: 48px;
        }
        .tile.x_g {
            background-position: 0 -128px;
            width: 48px;
            height: 32px;
        }
        .tile.x_b {
            background-position: -144px -208px;
            width: 80px;
            height: 48px;
        }
        .tile.x_d {
            background-position: 0 -96px;
            width: 80px;
            height: 32px;
        }
        .tile.x_w {
            background-position: -96px -224px;
            width: 48px;
            height: 32px;
        }
    </style>

    <script>
        var map = [
            '                                                  ',
            '                                                  ',
            '                                                  ',
            '                    w                             ',
            '                                       w          ',
            '                                                  ',
            '                       c                          ',
            '                                                  ',
            '                                        c         ',
            '                                                  ',
            '                c    kkkkk                        ',
            ' b                                     t        c ',
            '            d    g       d                        ',
            '                                                  ',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
            'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
        ];
    </script>

    <style>
        .slide {
            width: 302px;
            height: 347px;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            display: none;
        }

        .slide.active {
            display: block;
        }

        .slide1 {
            background-image: url('images/slide1.jpg');
        }

        .slide2 {
            background-image: url('images/slide2.jpg');
        }

        .slide3 {
            background-image: url('images/slide3.jpg');
        }

        .slide4 {
            background-image: url('images/slide4.jpg');
        }

        .slide5 {
            background-image: url('images/slide5.jpg');
        }

        .pagination {
            margin: 1em 0;
        }
    </style>

    <style>
        .question {
            color: #0078d7;
            padding: 10px 20px 10px;
            border-top: 1px solid #d2d2d2;
            cursor: pointer;
        }

        .question:hover {
            background: #e6e6e6;
        }

        .answer {
            padding: 10px 20px 10px;
            margin: 0;
            display: none;
        }

        .question.active + .answer {
            display: block;
        }
    </style>

    <style>
        .tabs {
            border-bottom: 1px solid black;
            width: 400px;
        }

        .tabs .item {
            background: grey;
            border: 1px solid black;
            border-radius: 10px 10px 0 0;
            display: inline-block;
            margin-bottom: -1px;
            padding: 10px 20px;
            cursor: pointer;
        }

        .tabs .item:hover,
        .tabs .item.active {
            background: lightgray;
        }

        .tabs-content .item {
            display: none;
        }

        .tabs-content .item.active {
            display: block;
        }
    </style>

    <p class="z">Кликая на кнопку Login я хочу чтобы затенялся экран и по середине экрана появлялось окошко для авторизации закрыть которое можно кликнув по кнопке с крестиком</p>

    <div class="overlay hidden"></div>
    <div class="pop-up pop-up--login hidden">
        <button class="close">x</button>
        <input type="text" placeholder="Username">
        <input type="password" placeholder="Password">
        <button class="login">Login</button>
    </div>

    <button class="show-login-pop-up">Login</button>

    <style>
        .overlay {
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            background: black;
            opacity: 0.8;
        }

        .pop-up {
            position: fixed;
            left: 50%;
            top: 50%;
            margin-top: -200px;
            margin-left: -150px;
            background: white;
            border-radius: 10px;
            width: 300px;
            height: 400px;
            padding: 20px;
            box-sizing: border-box;
        }

        .pop-up input {
            margin-bottom: 10px;
            display: block;
        }

        .pop-up .close {
            position: absolute;
            width: 30px;
            height: 30px;
            text-align: center;
            line-height: 30px;
            background: black;
            color: white;
            border-radius: 50%;
            right: -15px;
            top: -15px;
            cursor: pointer;
            font-family: Tahoma, sans-serif;
            border: none;
        }

        .pop-up .close:hover {
            background: #912626;
        }
    </style>

    <p class="z">Отменить действие по-умолчанию при клике на ссылку</p>

    <p><a href="https://ebanoe.it/" class="link-ebanoe" target="_blank">Ebanoe.IT — голая правда о нашем айти</a></p>

    <p class="z">Надоела реклама про увеличение члена? При клике на кнопку "Больше не показывать" заноси в localStorage значение которое будешь проверять при загрузке страницы</p>
    <p class="t t97">Хочешь увеличить член? Заходи <a href="http://pornhub.com" target="_blank">сюда</a>! <button class="b97">Больше не показывать</button></p>

    <div id="app"></div>

    <script type="text/babel">
        class TaskChangeColor extends React.Component {
            state = {
                color: ''
            }

            handleClick = () => {
                this.setState({color: 'red'})
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет текста</p>
                        <p className="t t1" style={this.state}>Тест</p>
                        <button className="b b1" onClick={this.handleClick}>Изменить цвет текста</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColor extends React.Component {
            state = {
                backgroundColor: ''
            }

            handleClick = () => {
                this.setState({
                    backgroundColor: '#737373'
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить цвет фона</p>
                        <p className="t t2" style={this.state}>Тест</p>
                        <button className="b b2" onClick={this.handleClick}>Изменить цвет фона</button>
                    </>
                );
            }
        }

        class TaskChangeHref extends React.Component {
            state = {
                href: 'https://habrahabr.ru/'
            }

            handleClick = () => {
                this.setState({
                    href: 'https://ruseller.com/jquery.php'
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь ссылки</p>
                        <p className="t t3"><a href={this.state.href}>Тест</a></p>
                        <button className="b b3" onClick={this.handleClick}>Изменить путь ссылки</button>
                    </>
                );
            }
        }

        class TaskChangeSrc extends React.Component {
            state = {
                src: 'images/kaktus.jpg'
            }

            handleClick = () => {
                this.setState({
                    src: 'images/сусанин.jpg'
                })
            }
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить путь к картинке</p>
                        <p className="t t4">Тест <img src={this.state.src} width="100" /></p>
                        <button className="b b4" onClick={this.handleClick}>Изменить путь к картинке</button>
                    </>
                );
            }
        }

        class TaskChangeId extends React.Component {
            state = {
                id: 'ab'
            }

            handleClick = () => {
                this.setState({
                    id: 'abc'
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить id элемента</p>
                        <p className="t t5" id={this.state.id}>Тест</p>
                        <button className="b b5" onClick={this.handleClick}>Изменить id элемента</button>
                    </>
                );
            }
        }

        class TaskChangeText extends React.Component {
            state = {
                text: 'Тест'
            }

            handleClick = () => {
                this.setState({
                    text: 'Hello World!'
                })
            }
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить текст</p>
                        <p className="t t6">{this.state.text}</p>
                        <button className="b b6" onClick={this.handleClick}>Изменить текст</button>
                    </>
                );
            }
        }

        class TaskChangeHtml extends React.Component {
            state = {
                html: <b>Цветы</b>
            }

            handleClick = () => {
                this.setState({
                    html: <i>Цветы</i>
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить HTML</p>
                        <p className="t t7">Тест {this.state.html}</p>
                        <button className="b b7" onClick={this.handleClick}>Изменить HTML</button>
                    </>
                );
            }
        }

        class TaskChangeFontSize extends React.Component {
            state = {
                fontSize: ''
            }

            handleClick = () => {
                this.setState({
                    fontSize: '24px'
                })
            }
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку изменить размер шрифта</p>
                        <p className="t t8" style={this.state}>Тест</p>
                        <button className="b b8" onClick={this.handleClick}>Изменить размер шрифта</button>
                    </>
                );
            }
        }

        class TaskChangeAddClass extends React.Component {
            state = {
                className: 't t9'
            }

            handleClick = () => {
                this.setState({
                    className: 't t9 hi'
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку добавить класс 'hi'</p>
                        <p className={this.state.className}>Тест</p>
                        <button className="b b9" onClick={this.handleClick}>Добавить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeRemoveClass extends React.Component {
            state = {
                className: 't t10 hi'
            }

            handleClick = () => {
                this.setState({
                    className: 't t10'
                })
            }
            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку удалить класс 'hi'</p>
                        <p className={this.state.className}>Тест</p>
                        <button className="b b10" onClick={this.handleClick}>Удалить класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskChangeToggleClass extends React.Component {
            state = {
                className: 't t11'
            }

            handleClick = () => {
                this.state.className === 't t11' ? this.setState({className: 't t11 hi'}) : this.setState({className: 't t11'})
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку добавлять/удалять (в зависимости от наличия) класс 'hi'</p>
                        <p className={this.state.className}>Тест</p>
                        <button className="b b11" onClick={this.handleClick}>Добавить/удалить (в зависимости от наличия) класс 'hi'</button>
                    </>
                );
            }
        }

        class TaskXXX1 extends React.Component {
            constructor() {
                super();
                this.state = {
                    text: 'Тест'
                }
                window.addEventListener('click', function(e) {

                    this.setState({
                        text: e.target.className
                    })
                }.bind(this))
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на любом элементе страницы выводить значение атрибута class элемента</p>
                        <p className="t t12">{this.state.text}</p>
                    </>
                );
            }
        }

        class TaskXXX2 extends React.Component {
            state = {
                text: 'Солнце',
                textTranslate: 'Sun'
            }

            handleClick = () => {
                this.setState({
                    text: this.state.textTranslate
                })
            }

            render() {
                return (
                    <>
                        <p className="z">При клике на кнопку перевести текст на английский язык (перевод хранится в атрибуте data-en элемента)</p>
                        <p className="t t13" data-en={this.state.textTranslate}>{this.state.text}</p>
                        <button className="b b13" onClick={this.handleClick}>Перевести</button>
                    </>
                );
            }
        }

        class TaskChangeBackgroundColorOnResize extends React.Component {
            constructor() {
                super();
                this.state = {
                    backgroundColor: '#8fff00'
                }
                window.addEventListener('resize', function () {
                    var r = (Math.round(Math.random() * 255));
                    var g = (Math.round(Math.random() * 255));
                    var b = (Math.round(Math.random() * 255));
                    this.setState({
                        backgroundColor: 'rgb(' + r + ',' +  g + ',' + b + ')'
                    })
                }.bind(this));
            }

            render () {
                return (
                    <div>
                        <p className="z">При изменении размеров окна вкладки или браузера изменять фоновый цвет абзаца
                            (использовать RGB и Math.random)</p>
                        <p className="t t99" style={this.state}>Drugs are bad, m'kay, so, if you do drugs, you're bad, m'kay, because
                            drugs are bad.</p>
                    </div>
                );
            }
        }

        class TaskInputWithCounter extends React.Component {
            state = {
                text: 'Я не касался писи козла!'
            };

            onChange(e) {
                this.setState({
                    text: e.target.value
                });
            };

            render () {
                return (
                    <div>
                        <p className="z">При изменении значения элемента формы выводить количество символов которое оно
                            содержит</p>
                        <p className="t t98"><input type="text" onChange={this.onChange.bind(this)} defaultValue={this.state.text} />
                            <span className="t98-2">{this.state.text.length}</span></p>
                    </div>
                );
            }
        }

        class Girl extends React.Component {
            render () {
                return (
                    <div className="whore">
                        <div className="whore-name">{this.props.name}</div>
                        <img src={this.props.photo} width="200" />
                        <div className="whore-age">Возраст: {this.props.age}</div>
                        <div className="whore-hair">Цвет волос: {this.props.hair}</div>
                        <div className="whore-boobs">Размер груди: {this.props.boobs}</div>
                        <div className="whore-height">Рост: {this.props.height}</div>
                        <div className="whore-weight">Вес: {this.props.weight}</div>
                        <div className="whore-phone">{this.props.phone}</div>
                        <div className="whore-can-come">Выезд: {this.props.can_come ? '+' : '-'}</div>
                        <div className="whore-teaser">{this.props.teaser}</div>
                    </div>
                )
            }
        }

        class TaskWhores extends React.Component {
            state = {
                whores: [
                    {
                        name: 'Сильвия',
                        photo: 'images/silvia.jpg',
                        age: '18',
                        hair: 'блондинка',
                        boobs: '4',
                        weight: '50',
                        height: '168',
                        phone: '+380960000001',
                        can_come: true,
                        teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"',
                    }
                ]
            }

            handleClick = () => {
                var jasmine = {
                    name: 'Жасмин',
                    photo: 'images/zhasmin.jpg',
                    age: '18',
                    boobs: '3',
                    weight: '50',
                    height: '168',
                    phone: '+380960000000',
                    can_come: true,
                    teaser: 'Очень нежная девчонка доставит Вам удовольствие по полной программе! Каждый мужчина ищет идеальную женщину - попробуй, может быть я именно та которая тебе нужна... Фото мои 1000%!!! Выезда НЕТ!!! Квартира для встреч ЕСТЬ, 5 мин от ст. метро \"Дворец Украина\"'
                };

                this.setState({
                    whores: [
                        ...this.state.whores,
                        jasmine
                    ]
                });
            }

            render() {
                var girls = <div>
                    {
                        this.state.whores.map(function (whore, idx) {
                            return <Girl {...whore} key={idx} />
                        })
                    }
                </div>;

                return (
                    <div>
                        <div className="whores-container">
                            {girls}
                        </div>

                        <button className="b b14" onClick={this.handleClick}>Добавить анкету</button>
                    </div>
                )
            }
        }

        class TaskFish extends React.Component {
            state = {
                fishContainer: 1
            }

            handleClick = () => {
                this.state.fishContainer === 1 ? this.setState({fishContainer: 2}) : this.setState({fishContainer: 1})
            }

            render() {
                var fish = <img className="fish" src="images/fish.jpg" width="100" />;
                return (
                    <>
                        <p className="z">Переместить рыбу из первого контейнера во второй (при повторном клике из второго в первый и т.д.)</p>

                        <div className="cats-container">
                            <div className="cat-container-1">
                                <img className="cat" src="images/kat.png" width="100" />
                                {this.state.fishContainer === 1 ? fish : null}
                            </div>

                            <div className="cat-container-2">
                                <img className="cat" src="images/kat.png" width="100" />
                                {this.state.fishContainer === 2 ? fish : null}
                            </div>
                        </div>

                        <button className="b b15" onClick={this.handleClick}>Переместить рыбу</button>
                    </>
                );
            }
        }

        class TaskTooth extends React.Component {
            state = {
                click: false
            }

            handleClick = () => {
                this.setState({click: true})
            }

            render() {
                var tooth = <img className="tooth" src="images/tooth.jpg" width="200" />;
                var boy = <img className="boy" src="images/bro.jpg" width="600" />
                return (
                    <>
                        <p className="z">Удалить зуб</p>

                        <div className="tooth-container">
                            {this.state.click ? boy : tooth}
                        </div>

                        <button className="b b16" onClick={this.handleClick}>Удалить зуб</button>
                    </>
                );
            }
        }

        class TaskSkier extends React.Component {
            state = {
                x: 0
            }

            start = () => {
                this.interval = setInterval(function() {
                    this.setState({
                        x: this.state.x + 5
                    });
                }.bind(this), 10);
            }

            stop = () => {
                clearInterval(this.interval);
            }

            render () {
                var style = {
                    left: this.state.x + 'px'
                };
                return(
                    <div>
                        <p className="z">Хочу чтоб лыжник бесконечно ехал вправо (сдвиг на 5px каждые 16ms). При нажатии на
                            кнопку "Стоп!" останавливался.
                        </p>

                        <div className="ski-resort">
                            <img className="skier" src="images/skier.gif" style={style} />
                        </div>

                        <button className="b b17" onClick={this.start}>Поехали!</button>
                        <button className="b b17-2" onClick={this.stop}>Стоп!</button>
                    </div>
                )
            }
        }

        class TaskMikki extends React.Component {
            state = {
                mikki: [
                    '  XXXX        XXXX  ',
                    ' XXXXXX      XXXXXX ',
                    'XXXX XX XXXX XX XXXX',
                    'XXX  XXXXXXXXXX  XXX',
                    'XXXXXXXXXXXXXXXXXXXX',
                    'XXXXXXX      XXXXXXX',
                    ' XXXXX        XXXXX ',
                    '   XXX  XX XX XXX   ',
                    '    XX  XX XX XX    ',
                    '    XXX X  X  XX    ',
                    '    X         XX    ',
                    '    X    XXX  XX    ',
                    '    XX   XXX  XX    ',
                    '     XX      XX     ',
                    '      X  XX  X      ',
                    '       X    X       ',
                    '     XX XXXX XX     ',
                    '     XX      XX     ',
                    '    XX        XX    ',
                    '   XXXXXXXXXXXXXX   '
                ]
            }

            render() {
                var tiles = [];
                var i = 0;
                while (i < this.state.mikki.length) {
                    var j = 0;
                    while (j < this.state.mikki[i].length) {
                        var style = this.state.mikki[i][j] === 'X' ? {backgroundColor: 'black'} : null;
                        var tile = <div className="mikki_tile" style={style}></div>;
                        tiles.push(tile);
                        j++;
                    }
                    i++;
                }
                return (
                    <>
                        <p className="z">Хочу такое (смотри исходный код) <img src="images/mikki.png" /></p>
                        <div className="mikki_tiles">{tiles}</div>
                    </>
                );
            }
        }

        class TaskMario extends React.Component {
            state = {
                map: [
                    '                                                  ',
                    '                                                  ',
                    '                                                  ',
                    '                    w                             ',
                    '                                       w          ',
                    '                                                  ',
                    '                       c                          ',
                    '                                                  ',
                    '                                        c         ',
                    '                                                  ',
                    '                c    kkkkk                        ',
                    ' b                                     t        c ',
                    '            d    g       d                        ',
                    '                                                  ',
                    'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
                    'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
                    'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
                ]
            }

            render() {
                var tiles = [];
                var i = 0;
                while (i < this.state.map.length) {
                    var j = 0;
                    while (j < this.state.map[i].length) {
                        var style = {
                            top: i * 16 + 'px',
                            left: j * 16 + 'px'
                        };
                        var className = "tile ";
                        if (this.state.map[i][j] === 'w') {
                            className += "x_w";
                        }
                        if (this.state.map[i][j] === 'c') {
                            className += "x_c";
                        }
                        if (this.state.map[i][j] === 'k') {
                            className += "x_k";
                        }
                        if (this.state.map[i][j] === 'd') {
                            className += "x_d";
                        }
                        if (this.state.map[i][j] === 't') {
                            className += "x_t";
                        }
                        if (this.state.map[i][j] === 'g') {
                            className += "x_g";
                        }
                        if (this.state.map[i][j] === 'b') {
                            className += "x_b";
                        }
                        if (this.state.map[i][j] === 'z') {
                            className += "x_z";
                        }
                        var tile = <div className={className} style={style}></div>;
                        tiles.push(tile);
                        j++;
                    }
                    i++;
                }
                return (
                    <>
                        <p className="z">Создать мир Марио <img src="images/mario.png" /></p>
                        <div className="scene">{tiles}</div>
                        <button className="b b18">Создать мир</button>
                    </>
                );
            }
        }

        var slides = [                       //Массив путей к картинкам
            'images/slide1.jpg',
            'images/slide2.jpg',
            'images/slide3.jpg',
            'images/slide4.jpg',
            'images/slide5.jpg'
        ];

        var slides2 = [
            'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/P.t.altaica_Tomak_Male.jpg/1200px-P.t.altaica_Tomak_Male.jpg',
            'https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Siberischer_tiger_de_edit02.jpg/280px-Siberischer_tiger_de_edit02.jpg',
            'https://crosti.ru/patterns/00/01/24/1cd73127c8/picture.jpg',
            'https://fengshui.dp.ua/wp-content/uploads/2016/02/nbuh.jpg'
        ];

        class TaskSlider extends React.Component {
            state = {
                activeSlideIndex: 0
            }

            next = () => {
                this.state.activeSlideIndex === this.props.slides.length - 1 ?
                    this.setState({
                        activeSlideIndex: 0
                    }) :
                    this.setState({
                        activeSlideIndex: this.state.activeSlideIndex + 1
                    });
            };

            previous = () => {
                this.state.activeSlideIndex === 0 ?
                    this.setState({
                        activeSlideIndex: this.props.slides.length - 1
                    }) :
                    this.setState({
                        activeSlideIndex: this.state.activeSlideIndex - 1
                    });
            };

            render() {
                var {activeSlideIndex} = this.state;
                var {slides} = this.props;

                //Массив картинок
                var pictures = slides.map(function(elem, i) {
                    return <img src={slides[i]} className={`slide ${activeSlideIndex === i ? 'active' : ''}`} />;
                });

                return (
                    <>
                        <p className="z">Кликая по кнопкам "предыдущая" и "следующая" я хочу чтобы менялись соответственно слайды</p>

                        <div className="slider">
                            {pictures}
                        </div>

                        <div className="pagination">
                            <button className="previous" onClick={this.previous}>Previous</button>
                            <button className="next" onClick={this.next}>Next</button>
                        </div>
                    </>
                );
            }
        }

        var dataFaq = [
            {
                question: `В чем разница между 32-разрядной и 64-разрядной версиями Windows?`,
                answer: `Термины "32-разрядный" и "64-разрядный" описывают, каким образом процессор компьютера
                        (он также называется ЦП) обрабатывает информацию. 64-разрядная версия Windows обрабатывает
                        большие объемы оперативной памяти (ОЗУ) более эффективно по сравнению с 32-разрядной версией.
                        Не все устройства могут работать под управлением 64-разрядных версий Windows.`
            },
            {
                question: `Моя копия Windows приобретена через учебное заведение. Можно ли скачать её здесь?`,
                answer: `Да, но вам потребуется ключ продукта. Перейдите на страницу загрузок <b>Академические
                        продукты</b> и выберите версию Windows, чтобы начать.`
            },
            {
                question: `Что делать после создания носителя с помощью средства создания носителя?`,
                answer: `<p>
                            Чтобы установить Windows, после создания установочного носителя выполните одно из
                            следующих действий:
                        </p>
                        <ul>
                            <li>
                                Подключите USB-устройство флэш-памяти к компьютеру, на который необходимо установить
                                Windows, найдите его в проводнике и откройте файл setup.exe. Выполняйте инструкции,
                                отображаемые в ходе установки.
                            </li>
                            <li>
                                Если ваш компьютер настроен на загрузку с USB-накопителя, подключите USB-устройство
                                флэш-памяти к компьютеру, на который необходимо установить Windows, перезагрузите его,
                                а затем следуйте инструкциям по установке.
                            </li>
                            <li>
                                Если компьютер настроен на загрузку с DVD-дисковода, вставьте DVD-диск в компьютер,
                                перезагрузите компьютер, а затем следуйте инструкциям по установке.
                            </li>
                        </ul>`
            },
            {
                question: `Этот образ диска загрузочный?`,
                answer: `Образ диска с этого сайта можно использовать для создания загрузочных USB-носителей и
                        DVD-дисков, которые предоставляют доступ к средствам восстановления.`
            }
        ];

        class TaskFaq extends React.Component {
            state = {
                openQuestions: []
            }

            handleClick = (index) => {
                var {openQuestions} = this.state;
                var updatedOpenQuestions;
                //определить добавляем или удаляем индекс (порядковый номер) из массива
                if (openQuestions.includes(index)) {
                    //если добавляем, то добавить
                    updatedOpenQuestions = openQuestions.filter((el) => el !== index);
                } else {
                    //если удаляем, то удалить
                    updatedOpenQuestions = openQuestions.concat(index);
                }
                console.log('+++++', updatedOpenQuestions);
                //обновить стейт
                this.setState({
                    openQuestions: updatedOpenQuestions
                });
            }

            render() {
                var {data} = this.props;
                var {openQuestions} = this.state;
                var click = this.handleClick;
                return (
                    <>
                        <p className="z">Кликая вопросам я хочу видеть ответы на них</p>

                        <dl className="faq">{
                            data.map(function(item, index) {
                                return (
                                    <>
                                        <dt className={`question ${openQuestions.includes(index) ? 'active' : ''}`} onClick={() => { click(index) }}>{item.question}</dt>
                                        <dd className="answer">{item.answer}</dd>
                                    </>
                                );
                            })
                        }
                        </dl>
                    </>
                );
            }
        }

        var dataTabs = {

        }
        class TaskTabs extends React.Component {
            render() {
                return (
                    <>
                        <p className="z">Кликая по вкладкам я хочу видеть связанное содержимое</p>

                        <h2>Сеансы</h2>

                        <div className="tabs">
                            <div className="item active" data-tab="today">Сегодня</div>
                            <div className="item" data-tab="tomorrow">Завтра</div>
                            <div className="item" data-tab="23d">23 декабря</div>
                        </div>

                        <div className="tabs-content">
                            <div className="item active" data-tab="today">
                                <ul>
                                    <li>Звёздные войны: Последние джедаи</li>
                                    <li>Счастливый день смерти</li>
                                    <li>Дыши</li>
                                </ul>
                            </div>
                            <div className="item" data-tab="tomorrow">
                                <ul>
                                    <li>Киборги</li>
                                    <li>Земля троллей</li>
                                    <li>За пропастью во ржи</li>
                                </ul>
                            </div>
                            <div className="item" data-tab="23d">
                                <ul>
                                    <li>Мой любимый динозавр</li>
                                    <li>Фердинанд</li>
                                    <li>Джуманджи: Зов джунглей</li>
                                </ul>
                            </div>
                        </div>
                    </>
                );
            }
        }

        var App = function() {
            return (
                <>
                    <TaskChangeColor />
                    <TaskChangeBackgroundColor />
                    <TaskChangeHref />
                    <TaskChangeSrc />
                    <TaskChangeId />
                    <TaskChangeText />
                    <TaskChangeHtml />
                    <TaskChangeFontSize />
                    <TaskChangeAddClass />
                    <TaskChangeRemoveClass />
                    <TaskChangeToggleClass />
                    <TaskXXX1 />
                    <TaskXXX2 />
                    <TaskChangeBackgroundColorOnResize />
                    <TaskInputWithCounter />
                    <TaskWhores />
                    <TaskFish />
                    <TaskTooth />
                    <TaskSkier />
                    <TaskMikki />
                    <TaskMario />
                    <TaskSlider slides={ slides2 } />
                    <TaskFaq data={ dataFaq } />
                    <TaskTabs />
                </>
            );
        };

        ReactDOM.render(<App />, document.querySelector('#app'));
    </script>
</body>
</html>